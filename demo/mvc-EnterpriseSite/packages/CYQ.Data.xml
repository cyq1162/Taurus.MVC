<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CYQ.Data</name>
    </assembly>
    <members>
        <member name="T:CYQ.Data.AppConfig">
            <summary>
            常用配置文件项[Web(App).Config]的[appSettings|connectionStrings]项和属性名一致。
            除了可以从配置文件配置，也可以直接赋值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.SetApp(System.String,System.String)">
            <summary>
            设置Web.config或App.config的值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetApp(System.String)">
            <summary>
            获取Web.config或App.config的值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetApp(System.String,System.String)">
            <summary>
            获取Web.config或App.config的值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetAppInt(System.String,System.Int32)">
            <summary>
            获取Web.config或App.config的数字值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetConn(System.String,System.String@)">
            <summary>
            获取Web.config或App.config的connectionStrings节点的值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetConn(System.String)">
            <summary>
            获取Web.config或App.config的connectionStrings节点的值。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.IsEnumToInt">
            <summary>
            是否使用表字段枚举转Int方式（默认为false）。
            设置为true时，可以加快一点性能，但生成的表字段枚举必须和数据库一致。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Aop">
            <summary>
            Aop 插件配置项 示例配置：[ 完整类名,程序集(dll)名称]&lt;add key="Aop" value="Web.Aop.AopAction,Aop"/>
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.ThreadBreakPath">
            <summary>
            Tool.ThreadBreak 使用时，外置的文件配置相对路径（默认在环境变量Temp对应文件中）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.EntitySuffix">
            <summary>
            生成的实体类的后缀。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Version">
            <summary>
            获取当前Dll的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.RunPath">
            <summary>
            框架的运行路径（Bin目录）
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.XHtml">
            <summary>
            XHtml 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.CDataLeft">
            <summary>
            Xml.XHtmlHelper 中使用的 "&lt;![CDATA[" 项
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.CDataRight">
            <summary>
            Xml.XHtmlHelper 中使用的 "]]&gt;" 项
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.DtdUri">
            <summary>
            Xml.XHtmlHelper 中操作Html需要配置的DTD解析文档相对路径
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.Domain">
            <summary>
            Xml.MutilLanguage 语言切换设置时Cookie所需要的网站主域名[不带www]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.SysLangKey">
            <summary>
            Xml.MutilLanguage 类的默认语言Key，默认值：Chinese
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.DB">
            <summary>
            DataBase 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DefaultConn">
            <summary>
            默认数据库链接（可赋完整链接语句或Web.config配置项名称）
            如果不在配置文件(Web.Config）上配置Conn链接，可对此属性赋值进行配置。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DefaultDataBase">
            <summary>
            默认数据库名称（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DefaultDalType">
            <summary>
            默认数据库类型（只读）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.PagerBySelectBase">
            <summary>
            MSSQL是否启用分页存储过程SelectBase，默认false
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.FilterSqlInjection">
            <summary>
            MAction所有操作中的where条件，默认有超强的过滤单词，来过滤Sql注入关键字，如果语句包含指定的过滤词，则会返回错误信息，并记录日志。
            如果需要自定义关键字，可配置此项，如：“delete;from,truncate，其它单词”，分号表词组，需要同时包含两个词； 多个过滤词组以","逗号分隔
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.AutoID">
            <summary>
            MAction 操作 Oracle 时自增加int类型ID所需要配置的序列ID，Guid为ID则不用。
            如果需要为每个表都配置一个序列号，可以使用：SEQ_{0} 其中{0}会自动配对成表名，如果没有{0}，则为整个数据库共用一个序列。
            默认参数值：SEQ_{0}
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.SchemaMapPath">
            <summary>
            MAction 可将表架构映射到外部指定相对路径[外部存储,可避开数据库读取]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.DeleteField">
            <summary>
            删除字段名称（若表存在此设置的字段名称时，MActon的删除操作将变更变为更新操作）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.EditTimeFields">
            <summary>
            更新时间字段名称（若表存在指定字段名称时，自动更新时间，多个用逗号分隔）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.HiddenFields">
             <summary>
            系统全局要隐藏的字段名称（默认值为："cyqrownum,rowguid,deletefield"）
             </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.CommandTimeout">
            <summary>
            全局的数据库命令默认超时设置，默认值120秒（单位：秒）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.MasterSlaveTime">
            <summary>
            读写分离时用户对主数据库操作持续时间，默认值10秒（单位：秒）
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Cache">
            <summary>
            缓存相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.MemCacheServers">
            <summary>
            分布式缓存的服务器配置，多个用逗号（,）分隔
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.DefaultCacheTime">
            <summary>
            Cache.CacheManage 默认缓存项的时间[分钟(默认60)]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.IsAutoCache">
            <summary>
            是否智能缓存数据（默认开启）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.NoCacheTables">
            <summary>
            AutoCache开启时，可以设置不缓存的Table，多个用逗号分隔
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Log">
            <summary>
            日志类Log 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.LogConn">
            <summary>
            CYQ.Data.Log 类记录数据库异常日志 - 数据库链接配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.LogPath">
            <summary>
            文本日志的配置相对路径（默认为：Logs\\"）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.IsWriteLog">
            <summary>
            是否写数据库异常日志:开启时：有异常不抛出，转写入数据库；不开启：有异常会抛出
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Log.LogTableName">
            <summary>
            异常日志表名（默认为SysLogs，可配置）
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Debug">
            <summary>
            调试类AppDebug 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Debug.SqlFilter">
             <summary>
            毫秒数（这个是在对所有SQL语句的：将所有长时间(ms)的SQL语句写入日志，对应配置项LogPath的路径）
             </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Debug.InfoFilter">
            <summary>
            毫秒数（这个是在AppDebug开启后的：可通过此项设置条件过滤出时间(ms)较长的SQL语句）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Debug.OpenDebugInfo">
            <summary>
            开启信息调试记录：开启后MAction.DebugInfo可输出执行日志。
            同时AppDebug若要使用，也需要开启此项。
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConst">
            <summary>
            内部常量类
            </summary>
        </member>
        <member name="F:CYQ.Data.AppConst.InvalidFileNameChars">
            <summary>
            无效的文件路径字符
            </summary>
        </member>
        <member name="F:CYQ.Data.AppConst._DLLFullName">
            <summary>
            框架程序集名称
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConst.RunFolderPath">
            <summary>
            框架的运行路径
            </summary>
        </member>
        <member name="T:CYQ.Data.AppDebug">
            <summary>
            应用程序调试类,能截到应用程序所有执行的SQL
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Start">
            <summary>
            开始记录调试信息
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Stop">
            <summary>
            停止并清除记录的调试信息
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.IsRecording">
            <summary>
            正在记录中
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.Info">
            <summary>
            获取调试信息
            </summary>
        </member>
        <member name="T:CYQ.Data.MAction">
            <summary>
            数据操作类[可操作单表/视图]
            </summary>
        </member>
        <member name="F:CYQ.Data.MAction._sourceTableName">
            <summary>
            原始传进来的表名/视图名，未经过[多数据库转换处理]格式化。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetIdentityInsertOn">
            <summary>
            MSSQL插入标识ID时开启此选项[事务开启时有效]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetIdentityInsertOff">
            <summary>
            MSSQL插入标识ID后关闭此选项[事务开启时有效]
            </summary>;
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tableNamesEnum">表名/视图名称</param>
            <example><code>
                MAction action=new MAction(TableNames.Users);
            或  MAction action=new MAction("Users");
            或  MAction action=new MAction("(select m.*,u.UserName from Users u left join Message m on u.ID=m.UserID) v");
            或  MAction action=new MAction(ViewNames.Users);//传视图
            或多数据库方式：
            MAction action=new MAction(U_DataBaseNameEnum.Users);
            说明：自动截取数据库链接[U_及Enum为前后缀],取到的数据库配置项为DataBaseNameConn
            U_为表 V_为视图 P_为存储过程
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object,System.String)">
            <summary>
            构造函数2
            </summary>
            <param name="tableNamesEnum">表名/视图名称</param>
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            <example><code>
                MAction action=new MAction(TableNames.Users,"Conn");
            或  MAction action=new MAction(TableNames.Users,"server=.;database=CYQ;uid=sa;pwd=123456");
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object)">
            <summary>
            表切换,在A表时，如果需要操作B,不需要重新new一个MAaction,可直接换用本函数切换
            </summary>
            <param name="tableObj">要切换的表/视图名</param>
            <example><code>
                using(MAction action = new MAction(TableNames.Users))
                {
                    if (action.Fill("UserName='路过秋天'"))
                    {
                        int id = action.Get&lt;int&gt;(Users.ID);
                        if (action.ResetTable(TableNames.Message))
                        {
                             //other logic...
                        }
                    }
                }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object,System.Boolean)">
            <summary>
            表切换
            </summary>
            <param name="tableObj">要切换的表/视图名</param>
            <param name="resetState">是否重置原有的数据状态（默认true)</param>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object,System.String)">
            <summary>
            表切换
            </summary>
            <param name="tableObj">要切换的表/视图名</param>
            <param name="newDbName">要切换的数据库名称</param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert">
            <summary>
             插入数据
            </summary>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.Set(Users.UserName,"路过秋天");
                action.Insert();
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(CYQ.Data.InsertOp)">
            <summary>
            插入数据
            </summary>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean,CYQ.Data.InsertOp)">
            <summary>
            插入数据
            </summary>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix方法设置控件前缀]</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.SetAutoPrefix("txt","ddl");
                action.Insert(true);
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update">
            <summary>
             更新数据[不传where条件时将自动尝试从UI获取]
            </summary>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.Set(Users.UserName,"路过秋天");
                action.Set(Users.ID,1);
                action.Update();
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.Set(Users.UserName,"路过秋天");
                action.Update("id=1");
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Boolean)">
            <summary>
             更新数据
            </summary>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object,System.Boolean)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.SetAutoPrefix("txt","ddl");
                action.Update("name='路过秋天'",true);
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Delete">
            <summary>
             删除数据[不传where条件时将自动尝试从UI获取]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Delete(System.Object)">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.MAction.Select">
            <summary>
            选择所有数据
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Object)">
            <summary>
            根据条件查询所有数据
            </summary>
            <param name="where">where条件如:id>1</param>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Int32,System.Int32,System.Object,System.Int32@)">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="rowCount">返回的记录总数</param>
            <returns>返回值MDataTable</returns>
        </member>
        <member name="M:CYQ.Data.MAction.Fill">
            <summary>
            填充自身，即单行选择[不传where条件时将自动尝试从UI获取]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Fill(System.Object)">
            <summary>
            填充自身[即单行选择]（填充后所有非Null值的状态会变更为1）
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:"id=88 or name='路过秋天'"</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                if(action.Fill("name='路过秋天'")) //或者action.Fill(888) 或者 action.Fill(id=888)
                {
                    action.SetTo(labUserName);
                }
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetCount">
            <summary>
            返回记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.GetCount(System.Object)">
            <summary>
            返回记录总数
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.MAction.Exists(System.Object)">
            <summary>
            是否存在指定条件的数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object,``0)">
            <summary>
            取值
            </summary>
            <param name="key">字段名</param>
            <param name="defaultValue">值为Null时的默认替换值</param>
        </member>
        <member name="M:CYQ.Data.MAction.Set(System.Object,System.Object)">
            <summary>
            设置值,例如:[action.Set(TableName.ID,10);]
            </summary>
            <param name="key">字段名称,可用枚举如:[TableName.ID]</param>
            <param name="value">要设置给字段的值</param>
            <example><code>
            set示例：action.Set(Users.UserName,"路过秋天");
            get示例：int id=action.Get&lt;int&gt;(Users.ID);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Set(System.Object,System.Object,System.Int32)">
            <summary>
            设置值
            </summary>
            <param name="state">手工设置状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.SetExpression(System.String)">
            <summary>
            更新(Update)操作的自定义表达式设置。
            </summary>
            <param name="updateExpression">例如a字段值自加1："a=a+1"</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Object,System.Object,System.Data.DbType)">
            <summary>
            参数化传参[当Where条件为参数化(如：name=@name)语句时使用]
            </summary>
            <param name="paraName">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Collections.Generic.List{CYQ.Data.Aop.AopCustomDbPara})">
            <summary>
            参数化传参[传进多个参数列表]
            </summary>
            <param name="customParas">Aop场景使用，传进多个参数。</param>
        </member>
        <member name="M:CYQ.Data.MAction.ClearPara">
            <summary>
            清除(SetPara设置的)自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.ClearParameters">
            <summary>
            清除系统参数[保留自定义参数]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetSelectColumns(System.Object[])">
            <summary>
            本方法可以在单表使用时查询指定的列[设置后可使用Fill与Select方法]
            提示：分页查询时，排序条件的列必须指定选择。
            </summary>
            <param name="columnNames">可设置多个列名[调用Fill或Select后,本参数将被清除]</param>
        </member>
        <member name="M:CYQ.Data.MAction.GetWhere(System.Boolean,CYQ.Data.Table.MDataCell[])">
            <summary>
            根据元数据列组合where条件。
            </summary>
            <param name="isAnd">true为and连接，反之为or链接</param>
            <param name="cells">单元格</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.GetWhere(CYQ.Data.Table.MDataCell[])">
            <summary>
            根据元数据列组合and连接的where条件。
            </summary>
            <param name="cells">单元格</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.SetTransLevel(System.Data.IsolationLevel)">
            <summary>
            设置事务级别
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:CYQ.Data.MAction.BeginTransation">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.EndTransation">
            <summary>
            提交结束事务[默认调用Close/Disponse时会自动调用]
            如果需要提前结束事务,可调用此方法
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.RollBack">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAopOff">
            <summary>
            取消Aop，在Aop独立模块使用MAction时必须调用
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAopOn">
            <summary>
            恢复默认配置的Aop。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAopPara(System.Object)">
            <summary>
            需要传递额外的参数供Aop使用时可设置。
            </summary>
            <param name="para"></param>
        </member>
        <member name="P:CYQ.Data.MAction.Data">
            <summary>
            Fill完之后返回的行数据
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TableName">
            <summary>
            当前操作的表名(若操作的是视图语句，则为最后的视图名字）
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.ConnectionString">
            <summary>
            获取当前数据库链接字符串
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DebugInfo">
            <summary>
            调试信息[如需要查看所有执行的SQL语句,请设置AppDebug.OpenDebugInfo或配置文件OpenDebugInfo项为ture]
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DalType">
            <summary>
            当前操作的数据库类型[Access/Mssql/Oracle/SQLite/MySql/Txt/Xml等]
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DataBase">
            <summary>
            当前操作的数据库名称
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DalVersion">
            <summary>
            当前操作的数据库的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.RecordsAffected">
            <summary>
            执行SQL命令时受影响的行数（-2则为异常）。
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TimeOut">
            <summary>
            命令超时设置[单位秒]
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.AllowInsertID">
            <summary>
            对于主键列为：Int自增标识的，是否允许手动插入ID
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.UI">
            <summary>
            UI操作
            </summary>
        </member>
        <member name="T:CYQ.Data.MProc">
            <summary>
            存储过程或SQL语句操作类
            </summary>
            <example><code>
            使用示例：
                      MDataTable table;
            实例化：  using(MProc proc = new MProc(ProcNames.GetList))
                      {
            添加参数：    proc.Set(GetList.ID, 10);
            获取列表：    table = proc.ExeMDataTable();
            关闭链接：}
            绑定控件：table.Bind(GridView1);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.op_Implicit(CYQ.Data.MAction)~CYQ.Data.MProc">
            <summary>
            将一个MAction 转换成一个MProc。
            </summary>
            <returns></returns>
        </member>
        <member name="F:CYQ.Data.MProc._conn">
            <summary>
            原始传进进来的链接。
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="procNameOrSql">存储过程名称,可通过枚举传入</param>
            <example><code>
                MProc action=new MProc(ProcNames.SelectAll);
            或  MProc action=new MProc("SelectAll");
            或多数据库方式：
            MAction action=new MAction(P_DataBaseNameEnum.SelectAll);
            说明：自动截取数据库链接[P_及Enum为前后缀],取到的数据库配置项为DataBaseNameConn
            U_为表 V_为视图 P_为存储过程
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object,System.String,System.Boolean[])">
            <summary>
            构造函数2
            </summary>
            <param name="procNameOrSql">存储过程名称,可通过枚举传入</param>
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            <example><code>
                MProc action=new MProc(ProcNames.SelectAll,"CYQ");
            或  MProc action=new MProc(ProcNames.SelectAll,"server=.;database=CYQ;uid=sa;pwd=123456");
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object,System.Boolean[])">
            <summary>
             表切存储过程,在操作完A存储过程后，如果需要操作B存储过程,不需要重新new一个MProc,可直接换用本函数切换
            用法参考MAction的ResetTable
            </summary>
            <param name="procNameOrSql">存储过程名或Sql语句</param>
            <param name="isClearParaAndisFixProc">允许多两个bool参数：1：是否清除参数；2：是否为存储过程</param>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object)">
            <summary>
             表切存储过程,在操作完A存储过程后，如果需要操作B存储过程,不需要重新new一个MProc,可直接换用本函数切换
            用法参考MAction的ResetTable
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeMDataTable">
            <summary>
            返回MDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeMDataTableList">
            <summary>
            执行的语句有多个结果集返回（库此方法不支持文本数据和AOP）
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeNonQuery">
            <summary>
            返回受影响的行数[用于更新或删除]，执行异常时返回-2
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeScalar``1">
            <summary>
            返回首行首列的单个值
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Set(System.Object,System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="paraName">参数名称如["ID"或Users.ID]</param>
            <param name="value">参数值如"11"</param>
        </member>
        <member name="M:CYQ.Data.MProc.Set(System.Object,System.Object,System.Data.DbType)">
            <summary>
            设置存储过程参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.ParaType)">
            <summary>
            设置特殊自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.ParaType,System.Object)">
            <summary>
            设置特殊自定义参数
            </summary>
            <param name="paraName">参数名称</param>
            <param name="paraType">参数类型</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.ParaType,System.Object,System.String)">
            <summary>
            设置特殊自定义参数
            </summary>
            <param name="typeName">MSSQL的用户定义表类型的名称</param>
        </member>
        <member name="M:CYQ.Data.MProc.Clear">
            <summary>
            清除存储过程参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetAopOff">
            <summary>
            取消AOP
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetAopOn">
            <summary>
            恢复默认配置的Aop。
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetAopPara(System.Object)">
            <summary>
            需要传递额外的参数供Aop使用时可设置。
            </summary>
            <param name="para"></param>
        </member>
        <member name="M:CYQ.Data.MProc.SetTransLevel(System.Data.IsolationLevel)">
            <summary>
            设置事务级别
            </summary>
            <param name="level">事务级别</param>
        </member>
        <member name="M:CYQ.Data.MProc.BeginTransation">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.EndTransation">
            <summary>
            提交结束事务[默认调用Close/Disponse时会自动调用]
            如果需要提前结束事务,可调用此方法
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.RollBack">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DebugInfo">
            <summary>
            调试信息[如需要查看所有执行的SQL语句,请设置配置文件OpenDebugInfo项为ture]
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DalType">
            <summary>
            当前操作的数据库类型[Access/Mssql/Oracle/SQLite/MySql等]
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DataBase">
            <summary>
            当前操作的数据库名称
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DalVersion">
            <summary>
            当前操作的数据库的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.RecordsAffected">
            <summary>
            执行SQL命令时受影响的行数（-2则为异常）。
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ConnectionString">
            <summary>
            获取当前数据库链接字符串
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.TimeOut">
            <summary>
            命令超时设置[单位秒]
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ReturnValue">
            <summary>
            存储过程的返回值
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.OutPutValue">
            <summary>
            存储过程的OutPut值
            单个输出时为值；
            多个输出时为Dictionary
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.ResetStaticVar">
            <summary>
            重置静态变量（方便回收内存，避免大量导数据后内存不回收）
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._needToSaveState">
            <summary>
             是否需要更新：0未更新；1仅插入[往后面插数据]；2更新删除或插入[重新保存],//需要更新[全局的可以有效处理并发]
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._Table">
            <summary>
            最后的写入时间
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._FileFullName">
            <summary>
            包含路径的完整文件名称
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._FileName">
            <summary>
            不包含路径的文件名称(带扩展名)
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.Reset(CYQ.Data.Table.MDataRow@,System.String,System.String,CYQ.Data.DalType)">
            <summary>
            切换表
            </summary>
            <param name="row">数据行结构</param>
            <param name="fileName">文件名称</param>
            <param name="filePath">文件路径</param>
            <param name="dalType">数据类型</param>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.CheckFileChanged(System.Boolean)">
            <summary>
            检测文件是否已被修改过
            </summary>
            <param name="isNeedToReloadTable"></param>
        </member>
        <member name="P:CYQ.Data.NoSqlAction.NextID">
            <summary>
            下一个自增加ID
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopInfo">
            <summary>
            Aop参数信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DalType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DataBase">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.AopPara">
            <summary>
            AOP的自定义参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsTransaction">
            <summary>
            是否事务中
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.MAction">
            <summary>
            当前上下文的处理程序。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.TableList">
            <summary>
            数据列表
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Row">
            <summary>
            数据行
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Where">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.AutoSetValue">
            <summary>
            自动从Form表单提取值[插入或更新时使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.InsertOp">
            <summary>
            数据插入选项
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.PageIndex">
            <summary>
            分页起始页
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.PageSize">
            <summary>
            分页每页条数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.UpdateExpression">
            <summary>
            更新操作的附加表达式。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.SelectColumns">
            <summary>
            指定的查询列
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsSuccess">
            <summary>
            Begin方法是否调用成功[在End中使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.RowCount">
            <summary>
            查询时返回的记录总数或ExeNonQuery的返回值
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.CustomDbPara">
            <summary>
            用户调用SetPara新增加的自定义参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.MProc">
            <summary>
            当前上下文的处理程序。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ProcName">
            <summary>
            存储过程名或SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsProc">
            <summary>
            是否存储过程
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DBParameters">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ExeResult">
            <summary>
            执行后返回的结果
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopCustomDbPara">
            <summary>
            设置自定义参数[使用MAction时，对Where条件进行的参数化传参使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.ParaName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.ParaDbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.AutoCache">
            <summary>
            内部智能缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.AutoCache.cacheKeys">
            <summary>
            单机存档： 表的baseKey:key1,key2,key3...
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheDependencyInfo">
            <summary>
            缓存依赖信息
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheDependencyInfo.callCount">
            <summary>
            被调用的次数。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheDependencyInfo.createTime">
            <summary>
            缓存产生的时间
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheDependencyInfo.cacheMinutes">
            <summary>
            缓存多少分钟
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheDependencyInfo.SetState(System.Boolean)">
            <summary>
            标识缓存对象的更改状态
            </summary>
            <param name="isChange"></param>
        </member>
        <member name="P:CYQ.Data.Cache.CacheDependencyInfo.IsChanged">
            <summary>
            系统文件依赖是否发生改变
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheManage">
            <summary>
            全局缓存类
            </summary>
            <example><code>
            使用示例：
            实例化： CacheManage cache=CacheManage.Instance;
            添加：   cache.Add("路过秋天",new MDataTable);
            判断：   if(cache.Contains("路过秋天"))
                     {
            获取：       MDataTable table=cache.Get("路过秋天") as MDataTable;
                     }
            </code></example>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Add(System.String,System.Object)">
            <summary>
            添加一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Clear">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Get(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Get``1(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetFileDependencyHasChanged(System.String)">
            <summary>
            获取目标的文件依赖是否发生更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetHasChanged(System.String)">
            <summary>
            获取缓存对象是否被手工标识为已更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Remove(System.String)">
            <summary>
            删除一个Cache对象
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Set(System.String,System.Object)">
            <summary>
            缓存设置：有则更新，无则添加
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.SetChange(System.String,System.Boolean)">
            <summary>
            手动对缓存象标识为已更改
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Update(System.String,System.Object)">
            <summary>
            更新缓存，缓存存在则更更新，不存在则跳过
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetKey(CYQ.Data.Cache.CacheKeyType,System.String)">
            <summary>
            获取系统内部缓存Key
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetKey(CYQ.Data.Cache.CacheKeyType,System.String,System.String,CYQ.Data.DalType)">
            <summary>
            获取系统内部缓存Key
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Instance">
            <summary>
            返回唯一实例(根据是否配置AppConfig.Cache.MemCacheServers的服务器决定启用本地缓存或分布式缓存）
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.LocalInstance">
            <summary>
            单机本地缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Count">
            <summary>
            获和缓存总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.RemainMemoryBytes">
            <summary>
            还可用的缓存字节数
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.RemainMemoryPercentage">
            <summary>
            还可用的缓存百分比
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheType">
            <summary>
            支持的Cache类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheType.LocalCache">
            <summary>
            本地缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheType.MemCache">
            <summary>
            分布式MemCached缓存
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheKeyType">
            <summary>
            Cache的Key类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheKeyType.Schema">
            <summary>
            表架构的Key
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheKeyType.AutoCache">
            <summary>
            智能缓存Key
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.InterAop">
            <summary>
            内部预先实现CacheAop
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.InterAop.Para">
            <summary>
            Aop参数
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopEnum">
            <summary>
            框架内部数据库操作方法枚举
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Select">
            <summary>
            查询多条记录方法 [参数为顺序为：Aop.AopEnum.Fill, out result, _TableName, aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Insert">
            <summary>
            插入方法 [参数为顺序为：Aop.AopEnum.Insert, out result, _TableName, aop_Row, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Update">
            <summary>
            更新方法  [参数为顺序为：Aop.AopEnum.Update, out result, _TableName, aop_Row, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Delete">
            <summary>
            删除方法  [参数为顺序为：Aop.AopEnum.Fill, out result, _TableName,aop_Row,aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Fill">
            <summary>
            查询一条记录方法 [参数为顺序为：Aop.AopEnum.Fill, out result, _TableName, aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.GetCount">
            <summary>
            取记录总数 [参数为顺序为：Aop.AopEnum.GetCount, out result, _TableName, aop_where, aop_otherInfo]
            </summary>
        </member>
        <!-- 对于成员“F:CYQ.Data.Aop.AopEnum.ExeMDataTableList”忽略有格式错误的 XML 注释 -->
        <member name="F:CYQ.Data.Aop.AopEnum.ExeMDataTable">
            <summary>
            MProc查询返回MDataTable方法 [参数为顺序为：AopEnum.ExeMDataTable, out result, procName, isProc, DbParameterCollection, aopInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeNonQuery">
            <summary>
            MProc执行返回受影响行数方法 [参数为顺序为：AopEnum.ExeNonQuery, out result, procName, isProc, DbParameterCollection, aopInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeScalar">
            <summary>
            MProc执行返回首行首列方法 [参数为顺序为：AopEnum.ExeScalar, out result, procName, isProc, DbParameterCollection, aopInfo]
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopResult">
            <summary>
            Aop函数的处理结果
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Default">
            <summary>
            本结果将执行原有事件，但跳过Aop.End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Continue">
            <summary>
            本结果将继续执行原有事件和Aop.End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Break">
            <summary>
            本结果将跳过原有事件,但会执行Aop End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Return">
            <summary>
            本结果将直接跳出原有函数的执行
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.IAop">
            <summary>
            Aop接口，需要实现时继承
            </summary>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Begin(CYQ.Data.Aop.AopEnum,CYQ.Data.Aop.AopInfo)">
            <summary>
            方法调用之前被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="objName">表名/存储过程名/视图名/sql语句</param>
            <param name="result">方法中可能返回的参数</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.End(CYQ.Data.Aop.AopEnum,CYQ.Data.Aop.AopInfo)">
            <summary>
            方法调用之后被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="success">调用是否成功</param>
            <param name="result">一般调用后的id[或MDataRow/MDataTable]</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnError(System.String)">
            <summary>
            数据库操作产生异常时,引发此方法
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Clone">
            <summary>
            克隆返回一个新的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnLoad">
            <summary>
            Aop 首次加载时被触发的事件
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.MemCache">
            <summary>
            分布式缓存类
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.FNV1_32">
            <summary>
            Fowler-Noll-Vo hash, variant 1, 32-bit version.
            http://www.isthe.com/chongo/tech/comp/fnv/
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.FNV1a_32">
            <summary>
            Fowler-Noll-Vo hash, variant 1a, 32-bit version.
            http://www.isthe.com/chongo/tech/comp/fnv/
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.ModifiedFNV1_32">
            <summary>
            Modified Fowler-Noll-Vo hash, 32-bit version.
            http://home.comcast.net/~bretm/hash/6.html
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.MemcachedClient">
            <summary>
            Memcached client main class.
            Use the static methods Setup and GetInstance to setup and get an instance of the client for use.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Setup(System.String,System.String[])">
            <summary>
            Static method for creating an instance. This method will throw an exception if the name already exists.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="servers">A list of memcached servers in standard notation: host:port. 
            If port is omitted, the default value of 11211 is used. 
            Both IP addresses and host names are accepted, for example:
            "localhost", "127.0.0.1", "cache01.example.com:12345", "127.0.0.1:12345", etc.</param>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Exists(System.String)">
            <summary>
            Static method which checks if a given named MemcachedClient instance exists.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns></returns>
        </member>
        <member name="F:CYQ.Data.Cache.MemcachedClient.defaultInstance">
            <summary>
            Static method for getting the default instance named "default".
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.GetInstance(System.String)">
            <summary>
            Static method for getting an instance. 
            This method will first check for named instances that has been set up programmatically.
            If no such instance exists, it will check the "beitmemcached" section of the standard 
            config file and see if it can find configuration info for it there.
            If that also fails, an exception is thrown.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>The named instance.</returns>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.hash(System.String)">
            <summary>
            Private key hashing method that uses the modified FNV hash.
            </summary>
            <param name="key">The key to hash.</param>
            <returns>The hashed key.</returns>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.hash(System.UInt32)">
            <summary>
            Private hashing method for user-supplied hash values.
            </summary>
            <param name="hashvalue">The user-supplied hash value to hash.</param>
            <returns>The hashed value</returns>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.hash(System.String[])">
            <summary>
            Private multi-hashing method.
            </summary>
            <param name="keys">An array of keys to hash.</param>
            <returns>An arrays of hashes.</returns>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.hash(System.UInt32[])">
            <summary>
            Private multi-hashing method for user-supplied hash values.
            </summary>
            <param name="hashvalues">An array of keys to hash.</param>
            <returns>An arrays of hashes.</returns>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.checkKey(System.String)">
            <summary>
            Private key-checking method.
            Throws an exception if the key does not conform to memcached protocol requirements:
            It may not contain whitespace, it may not be null or empty, and it may not be longer than 250 characters.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Set(System.String,System.Object)">
            <summary>
            This method corresponds to the "set" command in the memcached protocol. 
            It will unconditionally set the given key to the given value.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully set.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Add(System.String,System.Object)">
            <summary>
            This method corresponds to the "add" command in the memcached protocol. 
            It will set the given key to the given value only if the key does not already exist.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully added.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Replace(System.String,System.Object)">
            <summary>
            This method corresponds to the "replace" command in the memcached protocol. 
            It will set the given key to the given value only if the key already exists.
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the value was successfully replaced.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Append(System.String,System.Object)">
            <summary>
            This method corresponds to the "append" command in the memcached protocol.
            It will append the given value to the given key, if the key already exists.
            Modifying a key with this command will not change its expiry time.
            Using the overload it is possible to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Prepend(System.String,System.Object)">
            <summary>
            This method corresponds to the "prepend" command in the memcached protocol.
            It will prepend the given value to the given key, if the key already exists.
            Modifying a key with this command will not change its expiry time.
            Using the overload it is possible to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Get(System.String)">
            <summary>
            This method corresponds to the "get" command in the memcached protocol.
            It will return the value for the given key. It will return null if the key did not exist,
            or if it was unable to retrieve the value.
            If given an array of keys, it will return a same-sized array of objects with the corresponding
            values.
            Use the overload to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Gets(System.String,System.UInt64@)">
            <summary>
            This method corresponds to the "gets" command in the memcached protocol.
            It works exactly like the Get method, but it will also return the cas unique value for the item.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Get(System.String[])">
            <summary>
            This method executes a multi-get. It will group the keys by server and execute a single get 
            for each server, and combine the results. The returned object[] will have the same size as
            the given key array, and contain either null or a value at each position according to
            the key on that position.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Gets(System.String[],System.UInt64[]@)">
            <summary>
            This method does a multi-gets. It functions exactly like the multi-get method, but it will
            also return an array of cas unique values as an out parameter.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Delete(System.String)">
            <summary>
            This method corresponds to the "delete" command in the memcache protocol.
            It will immediately delete the given key and corresponding value.
            Use the overloads to specify an amount of time the item should be in the delete queue on the server,
            or to specify a custom hash to override server selection.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.SetCounter(System.String,System.UInt64)">
            <summary>
            This method sets the key to the given value, and stores it in a format such that the methods
            Increment and Decrement can be used successfully on it, i.e. decimal representation of a 64-bit unsigned integer. 
            Using the overloads it is possible to specify an expiry time, either relative as a TimeSpan or 
            absolute as a DateTime. It is also possible to specify a custom hash to override server selection.
            This method returns true if the counter was successfully set.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.GetCounter(System.String)">
            <summary>
            This method returns the value for the given key as a ulong?, a nullable 64-bit unsigned integer.
            It returns null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Increment(System.String,System.UInt64)">
            <summary>
            This method corresponds to the "incr" command in the memcached protocol.
            It will increase the item with the given value and return the new value.
            It will return null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item. 
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Decrement(System.String,System.UInt64)">
            <summary>
            This method corresponds to the "decr" command in the memcached protocol.
            It will decrease the item with the given value and return the new value. If the new value would be 
            less than 0, it will be set to 0, and the method will return 0.
            It will return null if the item did not exist, was not stored properly as per the SetCounter method, or 
            if it was not able to successfully retrieve the item. 
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.FlushAll">
            <summary>
            This method corresponds to the "flush_all" command in the memcached protocol.
            When this method is called, it will send the flush command to all servers, thereby deleting
            all items on all servers.
            Use the overloads to set a delay for the flushing. If the parameter staggered is set to true,
            the client will increase the delay for each server, i.e. the first will flush after delay*0, 
            the second after delay*1, the third after delay*2, etc. If set to false, all servers will flush 
            after the same delay.
            It returns true if the command was successful on all servers.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Stats">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to all servers, and it will return a Dictionary for each server
            containing the results of the command.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Stats(System.String)">
            <summary>
            This method corresponds to the "stats" command in the memcached protocol.
            It will send the stats command to the server that corresponds to the given key, hash or host,
            and return a Dictionary containing the results of the command.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.MemcachedClient.Status">
            <summary>
            This method retrives the status from the serverpool. It checks the connection to all servers
            and returns usage statistics for each server.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.KeyPrefix">
            <summary>
            If you specify a key prefix, it will be appended to all keys before they are sent to the memcached server.
            They key prefix is not used when calculating which server a key belongs to.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.SendReceiveTimeout">
            <summary>
            The send receive timeout is used to determine how long the client should wait for data to be sent 
            and received from the server, specified in milliseconds. The default value is 2000.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.ConnectTimeout">
            <summary>
            The connect timeout is used to determine how long the client should wait for a connection to be established,
            specified in milliseconds. The default value is 2000.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.MinPoolSize">
            <summary>
            The min pool size determines the number of sockets the socket pool will keep.
            Note that no sockets will be created on startup, only on use, so the socket pool will only
            contain this amount of sockets if the amount of simultaneous requests goes above it.
            The default value is 5.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.MaxPoolSize">
            <summary>
            The max pool size determines how large the socket connection pool is allowed to grow.
            There can be more sockets in use than this amount, but when the extra sockets are returned, they will be destroyed.
            The default value is 10.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.SocketRecycleAge">
            <summary>
            If the pool contains more than the minimum amount of sockets, and a socket is returned that is older than this recycle age
            that socket will be destroyed instead of put back in the pool. This allows the pool to shrink back to the min pool size after a peak in usage.
            The default value is 30 minutes.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.MemcachedClient.CompressionThreshold">
            <summary>
            If an object being stored is larger in bytes than the compression threshold, it will internally be compressed before begin stored,
            and it will transparently be decompressed when retrieved. Only strings, byte arrays and objects can be compressed.
            The default value is 1048576 bytes = 1MB.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.PooledSocket">
            <summary>
            The PooledSocket class encapsulates a socket connection to a specified memcached server.
            It contains a buffered stream for communication, and methods for sending and retrieving
            data from the memcached server, as well as general memcached error checking.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.Dispose">
            <summary>
            Disposing of a PooledSocket object in any way causes it to be returned to its SocketPool.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.Close">
            <summary>
            This method closes the underlying stream and socket.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.Write(System.String)">
            <summary>
            Writes a string to the socket encoded in UTF8 format.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the socket and flushes the stream.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.ReadLine">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered, 
            and returns everything up to but not including that sequence as a UTF8-encoded string
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.ReadResponse">
            <summary>
            Reads a response line from the socket, checks for general memcached errors, and returns the line.
            If an error is encountered, this method will throw an exception.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.Read(System.Byte[])">
            <summary>
            Fills the given byte array with data from the socket.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.SkipUntilEndOfLine">
            <summary>
            Reads from the socket until the sequence '\r\n' is encountered.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.PooledSocket.Reset">
            <summary>
            Resets this PooledSocket by making sure the incoming buffer of the socket is empty.
            If there was any leftover data, this method return true.
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.PooledSocket.IsAlive">
            <summary>
            Checks if the underlying socket and stream is connected and available.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.ServerPool">
            <summary>
            The ServerPool encapsulates a collection of memcached servers and the associated SocketPool objects.
            This class contains the server-selection logic, and contains methods for executing a block of code on 
            a socket from the server corresponding to a given key.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.ServerPool.#ctor(System.String[])">
            <summary>
            Internal constructor. This method takes the array of hosts and sets up an internal list of socketpools.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.ServerPool.GetSocketPool(System.UInt32)">
            <summary>
            Given an item key hash, this method returns the socketpool which is closest on the server key continuum.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.ServerPool.Execute``1(System.UInt32,``0,CYQ.Data.Cache.UseSocket{``0})">
            <summary>
            This method executes the given delegate on a socket from the server that corresponds to the given hash.
            If anything causes an error, the given defaultValue will be returned instead.
            This method takes care of disposing the socket properly once the delegate has executed.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.ServerPool.ExecuteAll(CYQ.Data.Cache.UseSocket)">
            <summary>
            This method executes the given delegate on all servers.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.SocketPool">
            <summary>
            The SocketPool encapsulates the list of PooledSockets against one specific host, and contains methods for 
            acquiring or returning PooledSockets.
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.SocketPool.deadEndPointSecondsUntilRetry">
            <summary>
            If the host stops responding, we mark it as dead for this amount of seconds, 
            and we double this for each consecutive failed retry. If the host comes alive
            again, we reset this to 1 again.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.SocketPool.getEndPoint(System.String)">
            <summary>
            This method parses the given string into an IPEndPoint.
            If the string is malformed in some way, or if the host cannot be resolved, this method will throw an exception.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.SocketPool.Acquire">
            <summary>
            Gets a socket from the pool.
            If there are no free sockets, a new one will be created. If something goes
            wrong while creating the new socket, this pool's endpoint will be marked as dead
            and all subsequent calls to this method will return null until the retry interval
            has passed.
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.SocketPool.Return(CYQ.Data.Cache.PooledSocket)">
            <summary>
            Returns a socket to the pool.
            If the socket is dead, it will be destroyed.
            If there are more than MaxPoolSize sockets in the pool, it will be destroyed.
            If there are less than MinPoolSize sockets in the pool, it will always be put back.
            If there are something inbetween those values, the age of the socket is checked. 
            If it is older than the SocketRecycleAge, it is destroyed, otherwise it will be 
            put back in the pool.
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.LocalCache">
            <summary>
            单机缓存类
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.LocalCache.theState">
            <summary>
            非线程安全。
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Get(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
            <param name="key">标识</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Contains(System.String)">
            <summary>
            是否存在缓存
            </summary>
            <param name="key">标识</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Add(System.String,System.Object)">
            <summary>
            添加一个Cache对象
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Add(System.String,System.Object,System.String)">
            <param name="fileName">关联的文件</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Add(System.String,System.Object,System.Double)">
            <param name="cacheMinutes">缓存时间(单位分钟)</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Add(System.String,System.Object,System.String,System.Double)">
            <param name="cacheMinutes">缓存时间(单位分钟)</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Add(System.String,System.Object,System.String,System.Double,System.Web.Caching.CacheItemPriority)">
            <param name="level">缓存级别[高于Normal的将不受定时缓存清理的限制]</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Set(System.String,System.Object)">
            <summary>
            缓存设置：有则更新，无则添加
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Update(System.String,System.Object)">
            <summary>
            更新缓存，缓存存在则更更新，不存在则跳过
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Insert(System.String,System.Object,System.String,System.Double,System.Web.Caching.CacheItemPriority)">
            <summary>
            相对底层Cache添加方法,添加一个Cache请用Add方法
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
            <param name="fileName">依赖文件</param>
            <param name="cacheMinutes">缓存分钟数</param>
            <param name="level" >缓存级别</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Remove(System.String)">
            <summary>
            删除一个Cache对象
            </summary>
            <param name="key">标识</param>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.Clear">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.GetFileDependencyHasChanged(System.String)">
            <summary>
            获取目标的文件依赖是否发生更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.SetChange(System.String,System.Boolean)">
            <summary>
            手动对缓存象标识为已更改
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.LocalCache.GetHasChanged(System.String)">
            <summary>
            获取缓存对象是否被手工标识为已更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.CacheInfo">
            <summary>
            获取当前缓存信息对象列表
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.CacheTable">
            <summary>
            获取缓存信息对象列表（以表信息返回，默认5分钟更新一次，特殊情况会快速更新（如：Key被添加移除时））
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.WorkInfo">
            <summary>
            内存工作信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.Count">
            <summary>
            获和缓存总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.RemainMemoryPercentage">
            <summary>
            还可用的缓存百分比
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.LocalCache.RemainMemoryBytes">
            <summary>
            还可用的缓存字节数
            </summary>
        </member>
        <member name="P:CYQ.Data.ConnBean.Conn">
            <summary>
            数据库链接
            </summary>
        </member>
        <member name="P:CYQ.Data.ConnBean.ProviderName">
            <summary>
            数据类型提供者
            </summary>
        </member>
        <member name="P:CYQ.Data.ConnBean.ConnDalType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:CYQ.Data.DalType">
            <summary>
            操作的数据库类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DalType.None">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:CYQ.Data.DalType.MsSql">
            <summary>
            MSSQL[2000/2005/2008/2012/...]
            </summary>
        </member>
        <member name="F:CYQ.Data.DalType.Txt">
            <summary>
            Txt文本数据库
            </summary>
        </member>
        <member name="F:CYQ.Data.DalType.Xml">
            <summary>
            Xml数据库
            </summary>
        </member>
        <member name="T:CYQ.Data.ParaType">
            <summary>
            特殊参数类型[MProc SetCustom方法所使用的参数]
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.Cursor">
            <summary>
            Oracle 游标类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.OutPut">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.CLOB">
            <summary>
            Oracle CLOB类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.NCLOB">
            <summary>
             Oracle NCLOB类型
            </summary>
        </member>
        <member name="F:CYQ.Data.ParaType.Structured">
            <summary>
             MSSQL 用户定义表类型
            </summary>
        </member>
        <member name="T:CYQ.Data.DbResetResult">
            <summary>
            重置数据库的结果
            </summary>
        </member>
        <member name="F:CYQ.Data.DbResetResult.Yes">
            <summary>
             成功切换 数据库链接
            </summary>
        </member>
        <member name="F:CYQ.Data.DbResetResult.No_SaveDbName">
            <summary>
            未切换 - 相同数据库名。
            </summary>
        </member>
        <member name="F:CYQ.Data.DbResetResult.No_Transationing">
            <summary>
            未切换 - 事务中。
            </summary>
        </member>
        <member name="F:CYQ.Data.DbResetResult.No_DBNoExists">
            <summary>
            未切换 - 新数据库名不存在。
            </summary>
        </member>
        <member name="T:CYQ.Data.DbBase">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="F:CYQ.Data.DbBase.debugInfo">
            <summary>
            记录SQL语句信息
            </summary>
        </member>
        <member name="F:CYQ.Data.DbBase.isAllowInterWriteLog">
            <summary>
            是否允许进入写日志中模块
            </summary>
        </member>
        <member name="F:CYQ.Data.DbBase.connObject">
            <summary>
            数据库链接实体（创建的时候被赋值）;
            </summary>
        </member>
        <member name="M:CYQ.Data.DbBase.ChangeDatabase(System.String)">
            <summary>
            切换数据库（修改数据库链接）
            </summary>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DbBase.IsOwnerOtherDb(System.String)">
            <summary>
            是否数据库名称变化了
            </summary>
            <param name="dbTableName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DbBase.ExeDataReaderSQL(System.String,System.Boolean)">
            <summary>
            并发操作检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DbBase.WriteTime">
            <summary>
            记录执行时间
            </summary>
        </member>
        <member name="M:CYQ.Data.DbBase.ResetConn(CYQ.Data.ConnBean)">
            <summary>
            切换链接
            </summary>
            <param name="cb"></param>
        </member>
        <member name="M:CYQ.Data.DbBase.RollBack">
            <summary>
            事务（有则）回滚
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.DbBase.DataBase">
            <summary>
            获得链接的数据库名称
            </summary>
        </member>
        <member name="P:CYQ.Data.DbBase.Version">
            <summary>
            数据库的版本号
            </summary>
        </member>
        <member name="P:CYQ.Data.DbBase.IsAllowRecordSql">
            <summary>
            是否允许记录SQL语句 (内部操作会关掉此值为False）
            </summary>
        </member>
        <member name="P:CYQ.Data.DbBase.ReturnValue">
            <summary>
            存储过程返回值。
            </summary>
        </member>
        <member name="P:CYQ.Data.DbBase.OutPutValue">
            <summary>
            存储过程OutPut输出参数值。
            如果只有一个输出，则为值；
            如果有多个输出，则为Dictionary。
            </summary>
        </member>
        <member name="T:CYQ.Data.InsertOp">
            <summary>
            MAction的Insert方法的返回值选项
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.None">
            <summary>
            使用此项：插入数据后[MSSQL会返回ID,其它数据库则不会返回ID]
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.ID">
            <summary>
            使用此项：插入数据后会返回ID。
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.Fill">
            <summary>
            使用此项：插入数据后,会根据返回ID进行查询后填充数据行,[默认选项]
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.DBFast">
            <summary>
            快速操作操作类。
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Find``1(System.Object,System.String[])">
            <summary>
            查找单条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">条件</param>
            <param name="columns">指定查询的列（可选）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Select``1(System.String,System.String[])">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Select``1(System.Int32,System.String,System.String[])">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Select``1(System.Int32,System.Int32,System.Object,System.Int32@,System.String[])">
            <summary>
            查找多条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="pageIndex">第N页</param>
            <param name="pageSize">每页N条</param>
            <param name="where">条件</param>
            <param name="count">返回记录总数</param>
            <param name="columns">指定查询的列（可选）</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Delete``1(System.Object)">
            <summary>
            删除记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Insert``1(``0,CYQ.Data.InsertOp,System.Boolean)">
            <summary>
            添加一条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Update``1(``0,System.Object)">
            <summary>
            更新记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体对象</param>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.DBFast.Exists``1(System.Object)">
            <summary>
            是否存在指定的条件
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.OrmBase">
            <summary>
            ORM扩展基类
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object,System.String,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
            <param name="conn">数据链接,单数据库时可写Null,或写默认链接配置项:"Conn",或直接数据库链接字符串</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Set(System.Object,System.Object)">
            <summary>
            设置值,例如:[action.Set(TableName.ID,10);]
            </summary>
            <param name="key">字段名称,可用枚举如:[TableName.ID]</param>
            <param name="value">要设置给字段的值</param>
            <example><code>
            set示例：action.Set(Users.UserName,"路过秋天");
            get示例：int id=action.Get&lt;int&gt;(Users.ID);
            </code></example>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(System.Boolean,CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update">
            <summary>
             更新数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update(System.Object,System.Boolean)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Delete">
            <summary>
             删除数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Delete(System.Object)">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Fill">
            <summary>
            查询1条数据（自动取值）
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Fill(System.Object)">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select">
            <summary>
            列表查询
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.String)">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.Int32,System.String)">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="count">返回的记录总数</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.GetCount(System.Object)">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Exists(System.Object)">
            <summary>
            查询是否存在指定的条件的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.LoadFrom(System.Object)">
            <summary>
            批量加载值（可从Json、实体对象、MDataRow、泛型字段等批量加载值）
            </summary>
            <param name="jsonOrEntity">json字符串或实体对象</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetSelectColumns(System.Object[])">
            <summary>
            本方法可以在单表使用时查询指定的列[设置后可使用Fill与Select方法]
            提示：分页查询时，排序条件的列必须指定选择。
            </summary>
            <param name="columnNames">可设置多个列名[调用Fill或Select后,本参数将被清除]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetPara(System.Object,System.Object,System.Data.DbType)">
            <summary>
            参数化传参[当Where条件为参数化(如：name=@name)语句时使用]
            </summary>
            <param name="paraName">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.ClearPara">
            <summary>
            清除(SetPara设置的)自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetExpression(System.String)">
            <summary>
            更新操作的自定义表达式设置。
            </summary>
            <param name="updateExpression">例如a字段值自加1："a=a+1"</param>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.FieldSource">
            <summary>
             字段来源（当字段变更时，可以设置此属性来切换更新）
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.AllowInsertID">
            <summary>
            是否允许插入自增ID
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.TableName">
            <summary>
            获取或设置表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.Columns">
            <summary>
            获取表的结构。
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.DebugInfo">
            <summary>
            执行的调试语句输出
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.DalType">
            <summary>
            当前的数据库类型
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.RawData">
            <summary>
            原始行数据。
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.UI">
            <summary>
            UI操作
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.FieldSource">
            <summary>
            ORM CodeFirst 字段来源
            </summary>
        </member>
        <member name="F:CYQ.Data.Orm.FieldSource.Property">
            <summary>
            从实体属性来
            </summary>
        </member>
        <member name="F:CYQ.Data.Orm.FieldSource.Data">
            <summary>
            从数据库或文本数据来
            </summary>
        </member>
        <member name="F:CYQ.Data.Orm.FieldSource.BothOfAll">
            <summary>
            综合以上两者
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.SimpleOrmBase">
            <summary>
            简单ORM基类（纯数据交互功能）
            </summary>
        </member>
        <member name="F:CYQ.Data.Orm.SimpleOrmBase.IsUseAop">
            <summary>
            是否启用了AOP拦截设置字段值同步。
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetInit(System.Object)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetInit(System.Object,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.SetInit(System.Object,System.String,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
            <param name="conn">数据链接,单数据库时可写Null,或写默认链接配置项:"Conn",或直接数据库链接字符串</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert(CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert(CYQ.Data.InsertOp,System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="insertID">插入主键</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Insert(System.Boolean,CYQ.Data.InsertOp,System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
            <param name="option">插入选项</param>
            <param name="insertID">插入主键</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Update">
            <summary>
             更新数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Update(System.Object,System.Boolean)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Delete">
            <summary>
             删除数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Delete(System.Object)">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Fill">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Fill(System.Object)">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1">
            <summary>
            列表查询
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1(System.String)">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1(System.Int32,System.String)">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Select``1(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="count">返回的记录总数</param>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.GetCount(System.Object)">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Exists(System.Object)">
            <summary>
            查询是否存在指定的条件的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.SimpleOrmBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.SimpleOrmBase.AllowWriteLog">
            <summary>
            标识是否允许写日志。
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.SimpleOrmBase.FieldSource">
            <summary>
             字段来源（当字段变更时，可以设置此属性来切换更新）
            </summary>
        </member>
        <member name="T:CYQ.Data.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml_lat1">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml_special">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml_symbol">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:CYQ.Data.Properties.Resources.xhtml1_transitional">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreateForSchema">
            <summary>
            SQL 结构语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.GetTableDescriptionSql(System.String,CYQ.Data.Table.MCellStruct,CYQ.Data.DalType,System.Boolean)">
            <summary>
            获取单个列的表描述语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.CreateTableDescriptionSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DalType)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.CreateTableSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DalType,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForSchema.AlterTableSql(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Alter Table)语句
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTable">
            <summary>
            表格
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Join(CYQ.Data.Table.MDataTable,System.String[])">
            <summary>
            两表LeftJoin关联
            </summary>
            <param name="dt">关联表</param>
            <param name="appendColumns">追加显示的列，没有指定则追加关联表的所有列</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Join(System.Object,System.String,System.String[])">
            <summary>
            两表LeftJoin关联
            </summary>
            <param name="tableName">关联表名</param>
            <param name="joinOnName">关联的字段名，设置Null则自动取表主键为关联名</param>
            <param name="appendColumns">追加显示的列，没有指定则追加关联表的所有列</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Data.Common.DbDataReader)~CYQ.Data.Table.MDataTable">
            <summary>
            从DataReader隐式转换成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Data.DataTable)~CYQ.Data.Table.MDataTable">
            <summary>
            从DataTable隐式转换成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Collections.Generic.List{CYQ.Data.Table.MDataRow})~CYQ.Data.Table.MDataTable">
            <summary>
            从行集合隐式转换成MDataTable
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(CYQ.Data.Table.MDataRow)~CYQ.Data.Table.MDataTable">
            <summary>
            将一行数据装载成一个表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NewRow">
            <summary>
            新建一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NewRow(System.Boolean)">
            <summary>
            新建一行
            </summary>
            <param name="isAddToTable">是否顺带添加到表中</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Object)">
            <summary>
            使用本查询，得到克隆后的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Object)">
            <summary>
            使用本查询，得到克隆后的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Int32,System.Object,System.Object[])">
            <summary>
            使用本查询，得到克隆后的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.FindRow(System.Object)">
            <summary>
            使用本查询，得到原数据的引用。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.FindAll(System.Object)">
            <summary>
            使用本查询，得到原数据的引用。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetCount(System.Object)">
            <summary>
            统计满足条件的行数
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Split(System.Object)">
            <summary>
            根据条件分拆成两个表【满足条件，和非满足条件的】，分出来的数据行和原始表仍是同一个引用
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.LoadRow(CYQ.Data.Table.MDataRow)">
            <summary>
            加载行(包括行架构)[提示，仅当表为空架构时有效]
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToDataTable">
            <summary>
            转换成DataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToXml">
            <summary>
            输出Xml文档
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToXml(System.Boolean)">
            <summary>
            输出Xml文档
            </summary>
            <param name="isConvertNameToLower">名称转小写</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.WriteXml(System.String,System.Boolean)">
            <summary>
            保存Xml
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson">
            <summary>
            输出Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson(System.Boolean,System.Boolean,CYQ.Data.Table.RowOp,System.Boolean)">
            <param name="addHead">输出头部信息[带count、Success、ErrorMsg]</param>
            <param name="addSchema">首行输出表架构信息,反接收时可还原架构</param>
            <param name="rowOp">过滤选项</param>
            <param name="isConvertNameToLower">是否将名称转为小写</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.WriteJson(System.Boolean,System.Boolean,System.String)">
            <summary>
            输出Json[可指定保存路径]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Bind(System.Object)">
            <summary>
            将数据表绑定到列表控件
            </summary>
            <param name="control">列表控件[包括Repeater/DataList/GridView/DataGrid等]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Bind(System.Object,System.String)">
            <summary>
            将数据表绑定到列表控件
            </summary>
            <param name="control">列表控件[包括Repeater/DataList/GridView/DataGrid等]</param>
            <param name="paraID">当Control为XHtmlAction对象时，需要指定绑定的节点ID</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Merge(CYQ.Data.Table.MDataTable)">
            <summary>
            将新表的行放到原表的下面。
            </summary>
            <param name="newTable"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.SetState(System.Int32)">
            <summary>
            将表里所有行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.SetState(System.Int32,CYQ.Data.Table.BreakOp)">
            <summary>
            将表里所有行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
            <param name="op">状态设置选项</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToList``1(System.Boolean[])">
            <summary>
            转实体列表
            </summary>
            <param name="useEmit">是否使用Emit方式转换[数据越多[大于500条]性能越高],不写默认自适应判断</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp)">
            <summary>
            批量插入或更新 [提示：操作和当前表名有关，如当前表名不是要提交入库的表名,请给TableName属性重新赋值]
            </summary>
            <param name="op">操作选项[插入|更新]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp,System.String,System.Object[])">
            <param name="op">操作选项[插入|更新]</param>
            <param name="newConn">指定新的数据库链接</param>
            <param name="jointPrimaryKeys">AcceptOp为Update或Auto时，若需要设置联合主键为唯一检测或更新条件，则可设置多个字段名</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetChanges">
            <summary>
            获取修改过的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetChanges(CYQ.Data.Table.RowOp)">
            <summary>
            获取修改过的数据(若无修改，则返回Null）
            </summary>
            <param name="rowOp">仅Insert和Update选项可用</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.String)">
            <summary>
            返回某列的集合
            <param name="columnName">列名</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.String,CYQ.Data.Table.BreakOp)">
            <summary>
            返回某列的集合
            <param name="columnName">列名</param>
            <param name="op">参数选项</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.String,CYQ.Data.Table.BreakOp,System.Boolean)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">列名</param>
            <param name="op">过滤选项</param>
            <param name="isDistinct">是否去掉重复数据</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.Int32)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">第N列</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.Int32,CYQ.Data.Table.BreakOp)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">第N列</param>
            <param name="op">过滤选项</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetColumnItems``1(System.Int32,CYQ.Data.Table.BreakOp,System.Boolean)">
            <summary>
            返回某列的集合
            </summary>
            <typeparam name="T">列的类型</typeparam>
            <param name="columnIndex">第N列</param>
            <param name="op">过滤选项</param>
            <param name="isDistinct">是否去掉重复数据</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Clone">
            <summary>
            复制表
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetSchema(System.Boolean)">
            <summary>
            复制表的结构
            </summary>
            <param name="clone">是否克隆表结构</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Distinct(CYQ.Data.Table.MDataTable@)">
            <summary>
            过滤掉重复的数据行（仅比较基础类型、复杂数据类型仅比较类型名称）。
            <param name="filterRows">被过滤的数据集表</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Distinct">
            <summary>
            过滤掉重复的数据行（仅比较基础类型、复杂数据类型仅比较类型名称）。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.System#Data#IDataReader#Close">
            <summary>
            清除所有行
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.System#Data#IDataReader#NextResult">
            <summary>
            是否还有下一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.System#Data#IDataReader#Read">
            <summary>
            索引移到下一条，准备进行读取。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.Data.Common.DbDataReader)">
            <summary>
            不关闭Sdr（因为外部MProc.ExeMDataTableList还需要使用）
            </summary>
            <param name="sdr"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.Object)">
            <summary>
            从List列表里加载成MDataTable
            </summary>
            <param name="entityList">实体列表对象</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.String)">
            <summary>
            从Json或Xml字符串反加载成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateFrom(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            从Json或Xml字符串反加载成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Min``1(System.String)">
            <summary>
            获取列的最小值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Min``1(System.Int32)">
            <summary>
            获取列的最小值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">列索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Max``1(System.String)">
            <summary>
            获取列的最大值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Max``1(System.Int32)">
            <summary>
            获取列的最大值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">列索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Sum``1(System.String)">
            <summary>
            汇总某列的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Sum``1(System.Int32)">
            <summary>
            汇总某列的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="index">列索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Avg``1(System.String)">
            <summary>
            记算某列的平均值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Avg``1(System.Int32)">
             <summary>
            记算某列的平均值
             </summary>
             <typeparam name="T">类型</typeparam>
             <param name="index">列索引</param>
             <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Pivot">
            <summary>
            行转换列（不指定时，默认取最后三列处理）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Pivot(System.String,System.String,System.String)">
            <summary>
            行转换列
            </summary>
            <param name="rowName">用于指定行的列名</param>
            <param name="colName">用于分拆成列的列名</param>
            <param name="valueName">用于显示值的列名</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.JoinOnName">
            <summary>
            用于关联表的列名，不设置时默认取表主键值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Rows">
            <summary>
            表格行
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.DynamicData">
            <summary>
            动态存储数据
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Columns">
            <summary>
            表格的架构列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Conn">
            <summary>
            该表归属的数据库链接。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.System#Data#IDataRecord#FieldCount">
            <summary>
            获取列的总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.System#Data#IDataReader#Depth">
            <summary>
            获取数据行总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.System#Data#IDataReader#IsClosed">
            <summary>
            是否已读取完所所有数据，并清空了记录。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.RecordsAffected">
            <summary>
            返回（查询时）记录总数。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableJoin">
            <summary>
            表间的关联关系
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataView">
            <summary>
            仅用于Winform的列表绑定。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.AcceptOp">
            <summary>
            批量更新选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Insert">
            <summary>
            批量插入（由系统产生自增加ID）
            该执行会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.InsertWithID">
            <summary>
            批量插入（由用户指定ID插入）
            该执行会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Update">
            <summary>
            批量更新
            该执行会开启事务。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Auto">
            <summary>
            批量自动插入或更新（检测主键数据若存在，则更新；不存在，则插入）
            该执行不会开启事务。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.BreakOp">
            <summary>
            MDataTable 与 MDataRow SetState 的过滤选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.None">
            <summary>
            未设置，设置所有
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.Null">
            <summary>
            跳过设置值为Null的。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.Empty">
            <summary>
            跳过设置值为空的。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.BreakOp.NullOrEmpty">
            <summary>
            跳过设置值为Null或空的。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.RowOp">
            <summary>
            MDataRow 与 JsonHelper 行数据的过滤选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.None">
            <summary>
            未设置，输出所有，包括Null值的列
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.IgnoreNull">
            <summary>
            输出所有，但不包括Null值的列
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.Insert">
            <summary>
            输出具有插入状态的值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.RowOp.Update">
            <summary>
            输出具有更新状态的值
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.SysType">
            <summary>
            转实体所用参数
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.SysType.Base">
            <summary>
            基础类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.SysType.Enum">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.SysType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.SysType.Collection">
            <summary>
            集合类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.SysType.Generic">
            <summary>
            泛型
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.SysType.Custom">
            <summary>
            自定义类
            </summary>
        </member>
        <member name="T:CYQ.Data.UI.IUIValue">
            <summary>
            对于自定义控件，只要继承此接口，即可以使用GetFrom与SetTo方法
            </summary>
        </member>
        <member name="P:CYQ.Data.UI.IUIValue.MValue">
            <summary>
            控件的值
            </summary>
        </member>
        <member name="P:CYQ.Data.UI.IUIValue.MEnabled">
            <summary>
            控件的启用状态
            </summary>
        </member>
        <member name="P:CYQ.Data.UI.IUIValue.MID">
            <summary>
            控件的名称（Name）或ID
            </summary>
        </member>
        <member name="T:CYQ.Data.UI.RegisterUI">
            <summary>
            第三方控件UI注册
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.RegisterUI.Add(System.String,System.String)">
            <summary>
            添加要注册的第三方控件名称。
            </summary>
            <param name="controlClassName">控件类名，如：TextBox</param>
            <param name="propertyName">控件的自动取值或赋值属性名称，如：Text</param>
        </member>
        <member name="M:CYQ.Data.UI.RegisterUI.Clear">
            <summary>
            清除UI注册
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreateForPager">
            <summary>
            分页存储过程语句类
            </summary>
            <summary>
            Sql分页语句类
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top1Pager">
            <summary>
            首页查询
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top2Pager">
            <summary>
            最后一页查询
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top3Pager">
            <summary>
            前半段分页查询
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.top4Pager">
            <summary>
            后半段分页查询（即倒过来查询）
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.rowNumberPager">
            <summary>
            MSSQL、Oracle的行号分页
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.tempTablePager">
            <summary>
            临时表分页（不带自增加序列）
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreateForPager.tempTablePagerWithIdentity">
            <summary>
            临时表分页（带自增加序列）
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForPager.GetSelectBaseForSql2005">
            <summary>
            获取sql2005分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreateForPager.GetOrderBy(System.String,System.Boolean,System.String)">
            <summary>
            获取order by 语句
            </summary>
            <param name="reverse">排序是否反转</param>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCompatible">
            <summary>
            Sql语句多数据库兼容
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCompatible.Format(System.String,CYQ.Data.DalType)">
            <summary>
            同语句多数据库兼容处理
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlFormat">
            <summary>
            Sql 语句格式化类 (类似助手工具)
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.Keyword(System.String,CYQ.Data.DalType)">
            <summary>
            Sql关键字处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.NotKeyword(System.String)">
            <summary>
            去除关键字符号
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.Compatible(System.Object,CYQ.Data.DalType,System.Boolean)">
            <summary>
            Sql数据库兼容和Sql注入处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.RemoveWhereOneEqualsOne(System.String)">
            <summary>
            移除"where 1=1"
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.BuildSqlWithWhereOneEqualsTow(System.String)">
            <summary>
            创建补充1=2的SQL语句
            </summary>
            <param name="tableName">表名、或视图语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.FormatMySqlBit(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            Mysql Bit 类型不允许条件带引号 （字段='0' 不可以）
            </summary>
            <param name="where"></param>
            <param name="mdc"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.GetIFieldSql(System.Object)">
            <summary>
            静态的对IField接口处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.FormatDefaultValue(CYQ.Data.DalType,System.Object,System.Int32,System.Data.SqlDbType)">
            <summary>
            将各数据库默认值格式化成标准值，将标准值还原成各数据库默认值
            </summary>
            <param name="flag">[0:转成标准值],[1:转成各数据库值],[2:转成各数据库值并补充字符串前后缀]</param>
            <param name="sqlDbType">该列的值</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.SQL.SqlValue">
            <summary>
            用于多数据库兼容的替换关键字/函数
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Desc">
            <summary>
            对于Bit类型[是/否] 类型的排序：[#DESC]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Asc">
            <summary>
            对于Bit类型[是/否] 类型的排序：[#ASC]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.True">
            <summary>
            对于Bit类型[是/否] 的条件值：[#TRUE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.False">
            <summary>
            对于Bit类型[是/否] 的条件值：[#FALSE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Len">
            <summary>
            数据库函数 Len 取长度：[#LEN](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.GUID">
            <summary>
            数据库函数 GUID 获取：[#GETDATE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.ISNULL">
            <summary>
            数据库函数 ISNULL 判断：[#ISNULL](Exr1,Exr2)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.GetDate">
            <summary>
            数据库函数 GetDate 获取当前时间：[#GETDATE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Year">
            <summary>
            数据库函数 Year 获取时间的年：[#YEAR](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Month">
            <summary>
             数据库函数 Month 获取时间的月：[#MONTH](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Day">
            <summary>
            数据库函数 Day 获取时间的日：[#DAY](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Substring">
            <summary>
            数据库函数 Substring 截取字符串：[#SUBSTRING](字段,起始索引int,长度int)
            <example>
            <code>
            示例： [#Substring](Title,0,2)
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.CharIndex">
            <summary>
            数据库函数 CharIndex 查询字符所在的位置：[#CHARINDEX]('要查询的字符',字段)
            <example>
            <code>
            示例： [#CHARINDEX]('findtitle',Title)>0
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.DateDiff">
            <summary>
            数据库函数 DateDiff 比较日期的差异天数：[#DATEDIFF](参数,开始时间,结束时间)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Case">
            <summary>
            数据库函数 Case 分支语句，其它Case 一起的关键字也需要包含。
            <example>
            <code>
            示例： [#CASE] [#WHEN] languageID={1} [#THEN] {2} [#ELSE] 0 [#END]
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.CaseWhen">
            <summary>
            数据库函数 Case When 分支语句，其它Case 一起的关键字也需要包含。
            <example>
            <code>
            示例： [#CASE#WHEN] languageID={0} [#THEN] 1000000 [#ELSE] 0 [#END]
            </code>
            </example>
            </summary>
        </member>
        <member name="T:CYQ.Data.Extension.IField">
            <summary>
            实现此接口，来扩展自定义IField语法
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.Sql">
            <summary>
            内部的SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.ColID">
            <summary>
            列序号[列的顺序]
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.Name">
            <summary>
            列名或表名
            </summary>
        </member>
        <member name="T:CYQ.Data.DalCreate">
            <summary>
            数据库类型操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.Error.Throw(System.String)">
            <summary>
            抛出异常
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:CYQ.Data.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:CYQ.Data.LogType.Assert">
            <summary>
            断言
            </summary>
        </member>
        <member name="T:CYQ.Data.Log">
            <summary>
            日志静态类（可将日志输出到文本中）
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.WriteLog(System.String)">
            <summary>
            内部写日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.Exception)">
            <summary>
             将日志写到数据库中[需要配置LogConn项后方生效 ]
            </summary>
            <param name="err">日志信息</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.String)">
            <summary>
             将日志写到数据库中[需要配置LogConn项后方生效 ]
            </summary>
            <param name="message">日志信息</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.String,CYQ.Data.LogType)">
            <summary>
             将日志写到数据库中[需要配置LogConn项后方生效 ]
            </summary>
            <param name="message">日志信息</param>
            <param name="logType">日志类型</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.String,CYQ.Data.LogType,System.String)">
            <summary>
             将日志写到数据库中[需要配置LogConn项后方生效 ]
            </summary>
            <param name="message">日志信息</param>
            <param name="logType">日志类型</param>
            <param name="userName">用户账号</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToDB(System.String,System.String,System.String)">
            <summary>
             将日志写到数据库中[需要配置LogConn项后方生效 ]
            </summary>
            <param name="message">日志信息</param>
            <param name="logType">日志类型</param>
            <param name="userName">用户账号</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.String)">
            <summary>
            将日志写到外部txt[web.config中配置路径，配置项为Logpath,默认路径为 "Log/" ]
            </summary>
            <param name="message">日志内容</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.String,CYQ.Data.LogType)">
            <summary>
            将日志写到外部txt[web.config中配置路径，配置项为Logpath,默认路径为 "Log/" ]
            </summary>
            <param name="message">日志内容</param>
            <param name="logType">日志类型</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.String,System.String)">
            <summary>
            将日志写到外部txt[web.config中配置路径，配置项为Logpath,默认路径为 "Log/" ]
            </summary>
            <param name="message">日志内容</param>
            <param name="logType">日志类型</param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.Exception)">
            <summary>
            将异常写入文件
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.GetExceptionMessage(System.Exception)">
            <summary>
            获取异常的内部信息
            </summary>
        </member>
        <member name="T:CYQ.Data.SysLogs">
            <summary>
            日志记录到数据库（需要配置LogConn链接后方有效）
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.ID">
            <summary>
            标识主键
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.PageUrl">
            <summary>
            请求的地址
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.UserName">
            <summary>
            记录者用户名
            </summary>
        </member>
        <member name="P:CYQ.Data.SysLogs.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:CYQ.Data.OracleDal.ManagedName">
            <summary>
            区分Oracle11和Oracle12的Dll名称。
            </summary>
        </member>
        <member name="P:CYQ.Data.OracleDal.IsUseOdpNet">
            <summary>
            是否使用Oracle的ODP.NET组件。
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.DataType">
            <summary>
            数据类型转换类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetType(System.Data.SqlDbType)">
            <summary>
            获得数据类型对应的Type
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetType(System.Data.SqlDbType,CYQ.Data.DalType)">
            <summary>
            获得数据类型对应的Type
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.Type)">
            <summary>
            将DbType类型对应映射到SqlDbType类型
            </summary>
            <param name="type">DbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.String)">
            <summary>
            将DbType类型字符串表达方式对应映射到SqlDbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.String)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.String,CYQ.Data.DalType)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.Type)">
            <summary>
            将SqlDbType类型对应映射到DbType类型
            </summary>
            <param name="type">SqlDbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetGroup(System.Data.SqlDbType)">
            <summary>
            字母型返回0；数字型返回1；日期型返回2；bool返回3；guid返回4；其它返回999
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetGroup(System.Data.SqlDbType,CYQ.Data.DalType)">
            <summary>
            字母型返回0；数字型返回1；日期型返回2；bool返回3；guid返回4；其它返回999
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDataType(CYQ.Data.Table.MCellStruct,CYQ.Data.DalType,System.String)">
            <summary>
            导数据，创建表所用
            </summary>
            <param name="ms">单元结构</param>
            <param name="dalTo">数据库类型</param>
            <param name="version">数据库版本号</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetMaxSize(System.Data.SqlDbType)">
            <summary>
            CodeFirst时的默认类型的字段长度。
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.SQL.TableSchema">
            <summary>
            表结构类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.TableSchema.FixTableSchemaType(System.Data.Common.DbDataReader,System.Data.DataTable)">
            <summary>
            DbDataReader的GetSchema拿到的DataType、Size、Scale很不靠谱
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.TableSchema.GetTables(CYQ.Data.DbBase@)">
            <summary>
            获取表（带缓存）
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.TableSchema.GetSchemaKey(System.String,System.String,CYQ.Data.DalType)">
            <summary>
            缓存表架构Key
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.TableSchema.Exists(System.String,System.String,CYQ.Data.DbBase@)">
            <summary>
            是否存在表或视图
            </summary>
            <param name="type">"U"或"V"</param>
            <param name="name">表名或视图名</param>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreate">
            <summary>
            数据操作语句类
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate.isCanDo">
            <summary>
            是否允许执行SQL操作（仅对Insert和Update有效；如果SQL语法错误，则拒绝执行）
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate.updateExpression">
            <summary>
            更新操作的附加表达式。
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate.selectColumns">
            <summary>
            指定查询的列。
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetInsertSql">
            <summary>
            返回插入的字符串
            </summary>
            <returns>结果如:insert into tableName(ID,Name,Value) values(@ID,@Name,@Value)</returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetUpdateSql(System.Object)">
            <summary>
            返回不包括Where条件的字符串
            </summary>
            <returns>结果如:Update tableName set Name=@Name,Value=@Value</returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetPrimaryWhere">
            <summary>
            获取主键组合的Where条件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetWhere(CYQ.Data.DalType,System.Boolean,CYQ.Data.Table.MDataCell[])">
            <summary>
            根据元数据列组合where条件。
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.SQL.SqlCreate.AutoID">
            <summary>
            oracle序列名称
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.AlterOp">
            <summary>
            列结构修选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.None">
            <summary>
            默认不修改状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.AddOrModify">
            <summary>
            添加或修改状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.Drop">
            <summary>
            删除列状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AlterOp.Rename">
            <summary>
            重命名列状态
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MCellValue">
            <summary>
            单元结构的值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellValue.State">
            <summary>
            状态改变:0;未改,1;进行赋值操作[但值相同],2:赋值,值不同改变了
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MCellStruct">
            <summary>
            单元结构属性
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsPrimaryKey">
            <summary>
            是否关键字
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsUniqueKey">
            <summary>
            是否唯一索引
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsForeignKey">
            <summary>
            是否外键
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.FKTableName">
            <summary>
            外键表名
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.Description">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsCanNull">
            <summary>
            是否允许为Null
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsAutoIncrement">
            <summary>
            是否自增加
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.OldName">
            <summary>
            旧的列名（AlterOp为Rename时可用）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.MaxSize">
            <summary>
            最大字节
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.Scale">
            <summary>
            精度（小数位）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.SqlTypeName">
            <summary>
            原始的数据库字段类型名称
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MCellStruct.Clone">
            <summary>
            克隆一个对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.MDataColumn">
            <summary>
            结构集合
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.SqlType">
            <summary>
            SqlDbType类型
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MCellStruct.AlterOp">
            <summary>
            列结构改变状态
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataCell">
            <summary>
            单元格
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.FixValue">
            <summary>
            数据类型被切换，重新修正值的类型。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.FixValue(System.Exception@)">
            <summary>
            数据类型被切换，重新修正值的类型。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ChangeValue(System.Object,System.Type,System.Int32,System.Exception@)">
            <summary>
             值的数据类型转换。
            </summary>
            <param name="value">要被转换的值</param>
            <param name="convertionType">要转换成哪种类型</param>
            <param name="groupID">数据库类型的组号</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.SetDefaultValueToValue">
            <summary>
            设置默认值。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ToString">
            <summary>
            已被重载，默认返回Value值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.Equals(System.Object)">
            <summary>
            是否值相同[已重写该方法]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ToRow">
            <summary>
            转成行
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsNull">
            <summary>
            值是否为Null值[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsNullOrEmpty">
            <summary>
            值是否为Null或为空[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.ColumnName">
            <summary>
            列名[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.Struct">
            <summary>
            单元格的结构
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.State">
            <summary>
            Value的状态:0;未改,1;进行赋值操作[但值相同],2:赋值,值不同改变了
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataColumn">
            <summary>
            头列表集合
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.CheckDuplicate">
            <summary>
            添加列时，检测名称是否重复(默认为true)。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.op_Implicit(System.Data.DataColumnCollection)~CYQ.Data.Table.MDataColumn">
            <summary>
            隐式转换列头
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.GetIndex(System.String)">
            <summary>
            获取列所在的索引位置(若不存在返回-1）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.SetOrdinal(System.String,System.Int32)">
            <summary>
            将 列 的序号或位置更改为指定的序号或位置。
            </summary>
            <param name="columnName">列名</param>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToJson(System.Boolean)">
            <summary>
            输出Json格式的表构架
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToRow(System.String)">
            <summary>
            转成行
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.WriteSchema(System.String)">
            <summary>
            保存表架构到外部文件中(json格式）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.dalType">
            <summary>
            当前的数据库类型。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataColumn.isViewOwner">
            <summary>
            该结构是否由视图拥有
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToTable">
            <summary>
            将表结构的数据转成Table显示
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String)">
            <summary>
            添加列
            </summary>
            <param name="columnName">列名</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType)">
            <param name="SqlType">列的数据类型</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType,System.Boolean)">
            <param name="isAutoIncrement">是否自增ID列</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Object)">
            <param name="defaultValue">默认值[日期类型请传入SqlValue.GetDate]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.CreateFrom(System.String)">
            <summary>
            从Json或文件中加载成列信息
            </summary>
            <param name="jsonOrFileName">Json或文件（完整路径）名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.CreateFrom(System.String,System.Boolean)">
            <summary>
            从Json或文件中加载成列信息
            </summary>
            <param name="jsonOrFileName">Json或文件（完整路径）名称</param>
            <param name="readTxtOrXml">是否从.txt或.xml文件中读取架构（默认为true）</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.Table">
            <summary>
            架构所引用的表
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.JointPrimary">
            <summary>
            联合主键
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.FirstPrimary">
            <summary>
            第一个主键
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataColumn.FirstUnique">
            <summary>
            首个唯一键
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataProperty">
            <summary>
            实现Winform的表格控件绑定功能。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataRow">
            <summary>
            一行记录
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValue(System.Int32)">
            <summary>
            此方法被Emit所调用
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValues">
            <summary>
            返回数组值
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToTable">
            <summary>
            将行的数据转成两列（ColumnName、Value）的表
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Clear">
            <summary>
            将行的数据行的值全重置为Null
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetState">
            <summary>
            获取行的当前状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetState(System.Boolean)">
            <summary>
            获取行的当前状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Set(System.Object,System.Object)">
            <summary>
            为行设置值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Set(System.Object,System.Object,System.Int32)">
            <summary>
            为行设置值
            </summary>
            <param name="key">字段名</param>
            <param name="value">值</param>
            <param name="state">手工设置状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState(System.Int32)">
            <summary>
            将行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState(System.Int32,CYQ.Data.Table.BreakOp)">
            <summary>
            将行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
            <param name="op">状态设置选项</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Clone">
            <summary>
            复制一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.CreateFrom(System.Object)">
            <summary>
            从实体、Json、Xml、IEnumerable接口实现的类、MDataRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.CreateFrom(System.Object,System.Type)">
            <summary>
            从实体、Json、Xml、IEnumerable接口实现的类、MDataRow
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson">
            <summary>
            输出行的数据Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson(CYQ.Data.Table.RowOp)">
            <summary>
            输出行的数据Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson(CYQ.Data.Table.RowOp,System.Boolean)">
            <summary>
            输出Json
            </summary>
            <param name="op">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.WriteJson(System.String,CYQ.Data.Table.RowOp)">
            <summary>
            将json保存到指定文件中
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToEntity``1">
            <summary>
            转成实体
            </summary>
            <typeparam name="T">实体名称</typeparam>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToAll(System.Object[])">
            <summary>
            将值批量赋给UI
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToAll(System.String,System.Object[])">
            <summary>
            将值批量赋给UI
            </summary>
            <param name="autoPrefix">自动前缀，多个可用逗号分隔</param>
            <param name="parentControls">页面控件</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom">
            <summary>
            从Web Post表单里取值。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Boolean,System.Object[])">
            <summary>
            从Web Post表单里取值 或 从Winform、WPF的表单控件里取值。
            <param name="isWeb">True为Web应用，反之为Win应用</param>
            <param name="prefixOrParentControl">Web时设置前缀，Win时设置父容器控件</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(CYQ.Data.Table.MDataRow)">
            <summary>
            从别的行加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(CYQ.Data.Table.MDataRow,CYQ.Data.Table.RowOp,System.Boolean)">
            <summary>
            从别的行加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(CYQ.Data.Table.MDataRow,CYQ.Data.Table.RowOp,System.Boolean,System.Boolean)">
            <summary>
            从别的行加载值
            </summary>
            <param name="row">要加载数据的行</param>
            <param name="rowOp">行选项[从其它行加载的条件]</param>
            <param name="isAllowAppendColumn">如果row带有新列，是否加列[默认值为：true]</param>
            <param name="isWithValueState">是否同时加载值的状态[默认值为：true]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object[])">
            <summary>
            从数组里加载值
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.String)">
            <summary>
            从json里加载值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Collections.IEnumerable)">
            <summary>
            从泛型字典集合里加载
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object)">
            <summary>
            将实体转成数据行。
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadFrom(System.Object,CYQ.Data.Table.BreakOp)">
            <summary>
            将实体转成数据行。
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToEntity(System.Object)">
            <summary>
            将行中的数据值赋给实体对象
            </summary>
            <param name="obj">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetToEntity(System.Object@,CYQ.Data.Table.MDataRow)">
            <summary>
            将指定行的数据赋给实体对象。
            </summary>
            <param name="obj"></param>
            <param name="row"></param>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Columns">
            <summary>
            获取列头
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Conn">
            <summary>
            所依属的数据库配置项名称[当MAction从带有架构的行加载时,此链接若存在,优先成为默认的数据库链接]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.TableName">
            <summary>
            原始表名[未经过多数据库兼容处理]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Item(System.Object)">
            <summary>
            输入枚举型数据
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Table">
            <summary>
            获取该行拥有其架构的 MDataTable。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.ItemArray">
            <summary>
            通过一个数组来获取或设置此行的所有值。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.RowError">
            <summary>
            获取或设置行的自定义错误说明。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.PrimaryCell">
            <summary>
            获取第一个关键主键列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.JointPrimaryCell">
            <summary>
            获取联合主键列表（若有多个主键）
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataRowCollection">
            <summary>
            行集合
            </summary>
            <summary>
            实现Winform DataGridView 的添加编辑和删除操作功能。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRowCollection.Add(System.Object[])">
            <summary>
            创建使用指定值的行，并将其添加到 MDataRowCollection 中
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRowCollection.Add(CYQ.Data.Table.MDataRow,System.Boolean)">
            <summary>
            添加行[默认重置状态为true]
            </summary>
            <param name="item">行</param>
            <param name="resetState">重置状态,[默认true]，重置后的行数据不参与MDataTable的批量更新操作,状态在重新赋值时改变。</param>
        </member>
        <member name="P:CYQ.Data.Table.MDataRowCollection.Table">
            <summary>
            获取该行拥有其架构的 MDataTable。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableBatchAction">
            <summary>
            批量操作。
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataTableBatchAction.jointPrimaryIndex">
            <summary>
            联合主键
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataTableBatchAction._dalHelper">
            <summary>
            内部操作对象（需要同一个事务处理）。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.FixTable(CYQ.Data.Table.MDataColumn)">
            <summary>
            进行列修正（只有移除 和 修正类型，若无主键列，则新增主键列）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.SetJoinPrimaryKeys(System.Object[])">
            <summary>
            设置联合主键
            </summary>
            <param name="jointPrimaryKeys">联合主键</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.CheckGUIDAndDateTime(CYQ.Data.DalType)">
            <summary>
            检测GUID，若空，补值。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.Op">
            <summary>
            操作符号
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.None">
            <summary>
            没有操作
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Big">
            <summary>
            操作符号:">"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.BigEqual">
            <summary>
            操作符号:">="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Equal">
            <summary>
            操作符号:"="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.NotEqual">
            <summary>
            操作符号:"&lt;>"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Small">
            <summary>
            操作符号:"&lt;"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.SmallEqual">
            <summary>
            操作符号:"&lt;="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Like">
            <summary>
            操作符号:"like"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.IsNull">
            <summary>
            是否Null值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.IsNotNull">
            <summary>
            非Null值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.In">
            <summary>
            操作符号：In
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.NotIn">
            <summary>
            操作符号：Not In
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.Ao">
            <summary>
            查询的基本连接条件
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.TFilter">
            <summary>
            条件过滤参数
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableFilter">
            <summary>
            MDataTable查询过滤器
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetTFilter(System.Object,CYQ.Data.Table.MDataColumn)">
            <summary>
            多个条件
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetSingleTFilter(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            单个条件
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetTFilterOk(System.String,System.Int32,System.String,CYQ.Data.Table.Op,CYQ.Data.Table.MDataColumn,CYQ.Data.Table.TFilter@)">
            <summary>
            条件比较
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.CompareMore(CYQ.Data.Table.MDataRow,CYQ.Data.Table.TFilter[])">
            <summary>
            值比较
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.SplitWhereOrderby(System.String@,System.String@)">
            <summary>
            分隔where条件中order by 出来
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.FilterColumns(CYQ.Data.Table.MDataTable@,System.Object[])">
            <summary>
            只保留查询的列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTableFilter.Ops">
            <summary>
            SQL操作符号
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.FastToT`1">
            <summary>
            快速转换类[数据量越大[500条起],性能越高]
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.FastToT`1.Create(CYQ.Data.Table.MDataTable)">
            <summary>
            构建一个ORM实体转换器
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="schema">表数据架构</param>
        </member>
        <member name="M:CYQ.Data.Tool.IOHelper.ReadAllText(System.String)">
            <summary>
            先自动识别UTF8，否则归到Default编码读取
            </summary>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.JsonHelper">
            <summary>
            json 帮助类
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.#ctor(System.Boolean)">
            <param name="addHead">是否带输出头</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.#ctor(System.Boolean,System.Boolean)">
            <param name="addSchema">是否首行带表结构[MDataTable.LoadFromJson可以还原表的数据类型]</param>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.IsConvertNameToLower">
            <summary>
            是否将名称转为小写
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonHelper.DateTimeFormatter">
            <summary>
            日期的格式化（默认：yyyy-MM-dd HH:mm:ss）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.AddBr">
            <summary>
            添加完一行数据后调用此方法换行
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.AddFoot(System.String,System.String)">
            <summary>
            添加底部数据（只有AddHead为true情况才能添加数据）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.AddFoot(System.String,System.String,System.Boolean)">
            <summary>
             添加底部数据（只有AddHead为true情况才能添加数据）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Add(System.String,System.String)">
            <summary>
            添加一个字段的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Add(System.String,System.String,System.Boolean)">
            <summary>
            添加一个字段的值
            </summary>
            <param name="noQuotes">值不带引号</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToString">
            <summary>
            输出Json字符串
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.IsJson(System.String)">
            <summary>
            检测是否Json格式的字符串
            </summary>
            <param name="json">要检测的字符串</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.IsJson(System.String,System.Int32@)">
            <summary>
            检测是否Json格式的字符串
            </summary>
            <param name="json">要检测的字符串</param>
            <param name="errIndex">错误的字符索引</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.GetJosnValue(System.String,System.String)">
            <summary>
            获取Json字符串的值
            </summary>
            <param name="json">Json字符串</param>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.OutResult(System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.Object}[])">
            <summary>
            返回Json格式的结果信息
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Split(System.String)">
            <summary>
            将Json分隔成键值对。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.SplitArray(System.String)">
            <summary>
            将Json 数组分隔成多个键值对。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataTable)">
            <summary>
            从数据表中取数据填充,最终可输出json字符串
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataRow)">
            <summary>
            从数据行中填充，最终可输出json字符串。
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataColumn,System.Boolean)">
            <summary>
            从数据结构填充，最终可输出json字符串。
            </summary>
            <param name="column">数据结构</param>
            <param name="isFullSchema">false：输出单行的[列名：数据类型]；true：输出多行的完整的数据结构</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(System.Object)">
            <summary>
            可从类(对象,泛型List、泛型Dictionary）中填充，最终可输出json字符串。
            </summary>
            <param name="obj">实体类对象</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToMDataTable(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            从Json字符串中反加载成数据表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToIEnumerator``1(System.String)">
            <summary>
            将Json转换成集合
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="json">json数据</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToEntity``1(System.String)">
            <summary>
            将Json转换为实体
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="json">json数据</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToList``1(System.String)">
            <summary>
            将Json转换为实体列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="json">json数据</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToJson(System.Object)">
            <summary>
            将一个对象（实体，泛型List，字典Dictionary）转成Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToJson(System.Object,System.Boolean)">
            <summary>
            将一个对象（实体，泛型List，字典Dictionary）转成Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToJson(System.Object,System.Boolean,CYQ.Data.Table.RowOp)">
            <summary>
             将一个对象（实体，泛型List，字典Dictionary）转成Json
            </summary>
            <param name="obj">对象</param>
            <param name="isConvertNameToLower">字段是否转小写</param>
            <param name="op">默认值为RowOp.All</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToXml(System.String)">
            <summary>
            将一个Json转成Xml
            </summary>
            <param name="json">Json字符串</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToXml(System.String,System.Boolean)">
            <summary>
            将一个Json转成Xml
            </summary>
            <param name="json">Json字符串</param>
            <param name="isWithAttr">是否转成属性，默认true</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.RowOp">
            <summary>
             Json输出行数据的过滤选项
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.Success">
            <summary>
            是否成功   
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.ErrorMsg">
            <summary>
            错误提示信息   
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.RowCount">
            <summary>
            当前返回的行数
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.Total">
            <summary>
            所有记录的总数（多数用于分页的记录总数）。
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.DBTool">
            <summary>
            数据库工具类[都是静态方法]
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDalType(System.String)">
            <summary>
            获取数据库链接的数据库类型
            </summary>
            <param name="conn">链接配置Key或数据库链接语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDataType(CYQ.Data.Table.MCellStruct,CYQ.Data.DalType,System.String)">
            <summary>
            获取指定数据库的数据类型
            </summary>
            <param name="ms">单元格结构</param>
            <param name="dalType">数据库类型</param>
            <param name="version">数据库版本号</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.TestConn(System.String)">
            <summary>
            测试数据库链接语句
            </summary>
            <param name="conn">链接配置Key或数据库链接语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetTables(System.String)">
            <summary>
            获取数据库表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetTables(System.String,System.String@)">
            <summary>
            获取数据库表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetTables(System.String,System.String@,System.String@)">
            <summary>
            获取所有表（表名+表说明）【链接错误时，抛异常】
            </summary>
            <param name="conn">数据库链接</param>
            <param name="dbName">返回指定链接的数据库名称</param>
            <param name="errInfo">链接错误时的信息信息</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.ExistsTable(System.String)">
            <summary>
            是否存在表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.ExistsTable(System.String,System.String)">
            <summary>
            是否存在指定的表
            </summary>
            <param name="tableName">表名[或文件名]</param>
            <param name="conn">数据库链接</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.ExistsTable(System.String,System.String,CYQ.Data.DalType@)">
            <summary>
            检测表是否存在
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <param name="dalType">数据库类型</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.ExistsTable(System.String,System.String,CYQ.Data.DalType@,System.String@)">
            <summary>
            检测表是否存在
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <param name="dalType">数据库类型</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.CreateTable(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            为指定的表架构生成SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.CreateTable(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            为指定的表架构生成SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableDescriptionSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DalType)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DalType,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetAlterTableSql(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            获取指定的表架构生成的SQL(Alter Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetAlterTableSql(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            获取指定的表架构生成的SQL(Alter Table)的说明语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.AlterTable(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            修改表的列结构
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.AlterTable(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            修改表的列结构
            </summary>
            <param name="tableName">表名</param>
            <param name="columns">列结构</param>
            <param name="conn">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.DropTable(System.String)">
            <summary>
            移除一张表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.DropTable(System.String,System.String)">
            <summary>
            移除一张表
            <param name="conn">数据库链接</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetSchema(System.String,System.String,System.String[])">
            <summary>
            获取表架构
            </summary>
            <param name="conn">数据库链接</param>
            <param name="connectionName">指定要返回架构的名称</param>
            <param name="restrictionValues">为指定的架构返回一组限制值</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.Type)">
            <summary>
            获取表列架构
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.Object)">
            <summary>
            获取表列架构
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.String,System.String,System.String@)">
            <summary>
            获取表列架构（链接错误时，抛异常）
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <param name="errInfo">出错时的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.String,System.String)">
            <summary>
            获取表列架构
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.Keyword(System.String,CYQ.Data.DalType)">
            <summary>
            为字段或表名添加关键字标签：如[],''等符号
            </summary>
            <param name="name">表名或字段名</param>
            <param name="dalType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.NotKeyword(System.String)">
            <summary>
            取消字段或表名添加关键字标签：如[],''等符号
            </summary>
            <param name="name">表名或字段名</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.FormatDefaultValue(CYQ.Data.DalType,System.Object,System.Int32,System.Data.SqlDbType)">
            <summary>
            将各数据库默认值格式化成标准值，将标准值还原成各数据库默认值
            </summary>
            <param name="flag">[0:转成标准值],[1:转成各数据库值]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetMapTableName(System.String,System.String)">
            <summary>
            映射的表名
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.JsonSplit">
            <summary>
            分隔Json字符串为字典集合。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.GetValueLength(System.String,System.Boolean,System.Int32@)">
            <summary>
            获取值的长度（当Json值嵌套以"{"或"["开头时）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonSplit.SetCharState(System.Char,CYQ.Data.Tool.JsonSplit.CharState@)">
            <summary>
            设置字符状态(返回true则为关键词，返回false则当为普通字符处理）
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.JsonSplit.CharState">
            <summary>
            字符状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonSplit.CharState.arrayStart">
            <summary>
            数组开始【仅第一开头才算】，值嵌套的以【childrenStart】来标识。
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonSplit.CharState.state">
            <summary>
            【0 取名称中】；【1 取值中】
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonSplit.CharState.keyStart">
            <summary>
            【-1 未初始化】【0 未开始】【1 无引号开始】【2 单引号开始】【3 双引号开始】
            </summary>
        </member>
        <member name="F:CYQ.Data.Tool.JsonSplit.CharState.valueStart">
            <summary>
            【-1 未初始化】【0 未开始】【1 无引号开始】【2 单引号开始】【3 双引号开始】
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.MDictionary`2">
            <summary>
            半线程安全字典类
            </summary>
            <typeparam name="K">key</typeparam>
            <typeparam name="V">value</typeparam>
        </member>
        <member name="T:CYQ.Data.Tool.StaticTool">
            <summary>
            静态方法工具类
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetPropertyInfo(System.Type)">
            <summary>
            获取属性列表
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetArgumentLength(System.Type@,System.Type[]@)">
            <summary>
            获取泛型的参数长度（非泛型按默认方法计算）
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetSystemType(System.Type@)">
            <summary>
            获取系统类型，若是Nullable类型，则转为基础类型。
             </summary>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.ToGuidByteString(System.String)">
            <summary>
            将GUID转成16字节字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.GetDbName(System.Object@)">
            <summary>
            获取约定枚举的数据库名称
            </summary>
            <param name="tableNamesEnum">表枚举或表名</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.StaticTool.ChangeType(System.Object,System.Type)">
            <summary>
            类型转换
            </summary>
            <param name="value">值处理</param>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Tool.ThreadBreak">
            <summary>
            在ASP.NET中使用多线程时，为了避开升级dll时产生多个线程互相影响，使用此类可以通过外置文件进行跳出。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.#ctor(System.String,System.Object)">
            <summary>
            提示：AppConfig中需要配置ThreadBreakPath项的路径
            </summary>
            <param name="threadName"></param>
            <param name="threadID"></param>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.NeedToBreak">
            <summary>
            是否需要退出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.ClearThreadBreak(System.String)">
            <summary>
            清除线程threadbreak文件。
            </summary>
            <param name="threadName">线程名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.ClearSchema">
            <summary>
            清除所有的表架构。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.AddGlobalThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            添加全局线程[通常该线程是个死循环，定时处理事情]
            </summary>
            <param name="start"></param>
        </member>
        <member name="T:CYQ.Data.UI.MActionUI">
            <summary>
            UI 对外接口
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetToAll(System.Object,System.Object[])">
            <summary>
            批量对所有控件自动赋值【默认前缀为（txt,ddl,chb）,可通过调用SetAutoPrefix调整】
            </summary>
            <param name="parentControl">父控件（可设置：this）</param>
            <param name="otherParentControls">可选（其它的父控件）</param>
            <example><code>
            action.SetAutoPrefix("txt","ddl");//设置控件的前缀
            action.SetToAll(this);
            </code></example>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetTo(System.Object)">
            <summary>
            将值赋给控件
            </summary>
            <param name="control">控件对象</param>
            <example><code>
            示例：action.SetTo(txtUserName);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);
            </code></example>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetTo(System.Object,System.String)">
            <param name="controlPropName">指定对某个属性赋值</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetTo(System.Object,System.String,System.Boolean)">
            <param name="isControlEnabled">设置控件是否可用</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetFrom(System.Object)">
            <summary>
            从控件中取值
            </summary>
            <param name="control">控件对象</param>
            <example><code>
            示例：action.GetFrom(txtUserName);//获取TextBox默认Text属性的值
            </code></example>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetFrom(System.Object,System.String)">
            <param name="controlPropName">从指定的属性里取值</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetFrom(System.Object,System.String,System.Object)">
            <param name="defaultValue">若控件无值，则取此默认值</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Bind(System.Object)">
            <summary>
            绑定DrowDownList等列表控件
            </summary>
            <param name="control">（下拉）列表控件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Bind(System.Object,System.String)">
            <summary>
            绑定DrowDownList等列表控件
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Bind(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            绑定下拉等列表,控件需要继承自：ListControl。
            </summary>
            <param name="control">DropDown/CheckBoxList/RadioButtonList等</param>
            <param name="where">对表的数据进行过滤如:"ID>15 and Url='cyqdata.com'"</param>
            <param name="text">绑定时显示的字段名[默认字段名取自控件的ID(去掉前三个字母前缀)]</param>
            <param name="value">绑定时显示字段对应的值[默认值的字段名为:ID]</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetAutoPrefix(System.String,System.String[])">
            <summary>
            自动获取值前缀设置,可传多个前缀[至少1个]
            </summary>
            <param name="autoPrefix">第一个前缀[必须]</param>
            <param name="otherPrefix">后面N个前缀[可选]</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.SetAutoParentControl(System.Object,System.Object[])">
            <summary>
            （Win或WPF）自动获取值父控件设置,可传多个父控件[至少1个]
            </summary>
            <param name="parent">第一个父控件名称[必须，可传：this]</param>
            <param name="otherParent">后面N个[可选]</param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Set(System.Object,System.String,System.Int32,System.Object)">
            <summary>
            MDataRow值-》赋给控件。
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.Get(System.Object,System.String,System.Object)">
            <summary>
            从控件里取值-》MDataRow （返回属性名称）
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.GetAll(System.Boolean)">
            <summary>
            自动设置列的值(true为插入,false为更新)
            </summary>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.AutoGetValue(CYQ.Data.Table.MDataCell)">
            <summary>
            对单个值自动取值。
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:CYQ.Data.UI.MActionUI.PrimayAutoGetValue">
            <summary>
            主键自动取值。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.MutilLanguage">
            <summary>
            多语言操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="filePath">xml文件路径</param>
            <param name="isForHtml">是否Html文件</param>
            <param name="isInitValueFromCookie">是获从Cookie初始化默认语言</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.#ctor(System.String,System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="filePath">xml文件路径</param>
            <param name="isForHtml">是否Html文件</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="filePath">xml文件路径</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.Get(System.Object)">
            <summary>
            获取多语言节点值
            </summary>
            <param name="lanID">Xml节点ID</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.Get(System.Object,System.Int32)">
            <summary>
            获取多语言节点值
            </summary>
            <param name="lanID">Xml节点ID</param>
            <param name="lanKeyID">LanguageKey对应的数字</param>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.Get(System.Object,CYQ.Data.Xml.LanguageKey)">
            <summary>
            获取多语言节点值
            </summary>
            <param name="lanID">Xml节点ID</param>
            <param name="lanEnum">获取的语言</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.SetToCookie(CYQ.Data.Xml.LanguageKey)">
            <summary>
            设置语言类型到Cookie中
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.SetToCookie(System.String)">
            <summary>
            设置语言类型到Cookie中
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.GetKey(System.Int32)">
            <summary>
            获取LanguageKey数字对应的枚举名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.MutilLanguage.GetValue(System.String)">
            <summary>
            获取LanguageKey枚举对应的数字
            </summary>
            <param name="langKey">LanguageKey枚举名称</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.FilePath">
            <summary>
            获取加载的Xml语言文件的完整（路径）名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.LanKey">
            <summary>
            获取或设置当前语言类型（如果有设置语言Cookie，则初始化时从Cookie恢复）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.DefaultLanKey">
            <summary>
            获取系统默认的语言（取值顺序：AppConfig.XHtml.SysLangKey - > 浏览器语言 -》 默认中文）
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.Rss">
            <summary>
            Rss操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.Set(System.String,System.String,System.String)">
            <summary>
            设置网站标题
            </summary>
            <param name="title">网站名称</param>
            <param name="link">网址</param>
            <param name="description">网站描述</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.SetImg(System.String,System.String,System.String)">
            <summary>
            设置图片（网站Logo）
            </summary>
            <param name="url">Logo网址</param>
            <param name="title">Logo标题</param>
            <param name="link">Logo点击时跳转链接</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.AddItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加RSS项（文章）
            </summary>
            <param name="title">标题</param>
            <param name="link">链接</param>
            <param name="author">作者</param>
            <param name="pubDate">发布日期</param>
            <param name="description">内容或摘要</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.LoadData(CYQ.Data.Table.MDataTable)">
            <summary>
            加载MDataTable,之后可调用SetMap进行字段映射
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.SetMap(CYQ.Data.Xml.RssItemName,System.String,System.Object[])">
            <summary>
            设置与MDataTable间的字段映射
            </summary>
            <param name="itemName">Rss名称</param>
            <param name="formatText">格式化，如“{0}.Name”，若无需要格式化，直接赋Null值</param>
            <param name="tableColumnNames">同DataTable的字段名称</param>
        </member>
        <member name="P:CYQ.Data.Xml.Rss.Channel">
            <summary>
            RSS 频道（默认）
            </summary>
        </member>
        <member name="E:CYQ.Data.Xml.Rss.OnForeach">
             <summary>
            LoadData（MDataTable）进行映射后，在格式化每一行数据时触发事件
             </summary>
        </member>
        <member name="P:CYQ.Data.Xml.Rss.OutXml">
            <summary>
            获取输出的RSS内容。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssChannel">
            <summary>
            RSS 频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Title">
            <summary>
            定义频道的标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Link">
            <summary>
            定义指向频道的超链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Category">
            <summary>
            为 feed 定义所属的一个或多个种类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Cloud">
            <summary>
            注册进程，以获得 feed 更新的立即通知
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Copyright">
            <summary>
            告知版权资料
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Docs">
            <summary>
            规定指向当前 RSS 文件所用格式说明的 URL
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Generator">
            <summary>
            规定指向当前 RSS 文件所用格式说明的 URL
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Language">
            <summary>
            规定编写 feed 所用的语言
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.LastBuildDate">
            <summary>
            定义 feed 内容的最后修改日期
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.ManagingEditor">
            <summary>
            定义 feed 内容编辑的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.PubDate">
            <summary>
            为 feed 的内容定义最后发布日期
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Rating">
            <summary>
            feed 的 PICS 级别
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.SkipDays">
            <summary>
            规定忽略 feed 更新的天
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.SkipHours">
            <summary>
            规定忽略 feed 更新的小时
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.TextInput">
            <summary>
            规定应当与 feed 一同显示的文本输入域
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Ttl">
            <summary>
            指定从 feed 源更新此 feed 之前，feed 可被缓存的分钟数
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.WebMaster">
            <summary>
            定义此 feed 的 web 管理员的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.RssImage">
            <summary>
            定义此 feed 的 图片Logo
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Items">
            <summary>
            频道项
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssImage">
            <summary>
            图片项
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Url">
            <summary>
            图片地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Title">
            <summary>
            图片标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Link">
            <summary>
            提供图片的站点链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssItem">
            <summary>
            RSS项
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Title">
            <summary>
            定义频道的标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Link">
            <summary>
            定义指向频道的超链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Category">
            <summary>
            为 feed 定义所属的一个或多个种类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Author">
            <summary>
            规定项目作者的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Comments">
            <summary>
            允许项目连接到有关此项目的注释（文件）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Enclosure">
            <summary>
            允许将一个媒体文件导入一个项中
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Guid">
            <summary>
            为 项目定义一个唯一的标识符
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.PubDate">
             <summary>
            定义此项目的最后发布日期
             </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Source">
            <summary>
            为此项目指定一个第三方来源
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssItemName">
            <summary>
            RSS 项枚举
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.ValueReplace">
            <summary>
            XHtmlAction 使用时的值替换
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.Source">
            <summary>
            Set 方法中 原节点的值 ：[#source]
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.New">
            <summary>
            LoadData加载数据后，数据的值 ：[#new]
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.LangSplit">
            <summary>
            MutilLanguage 类 Get方法取到值后，按[#langsplit]分隔并按当前语言返回分隔符前面或后面值
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XHtmlAction">
            <summary>
            Xml/Html操作类
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XHtmlBase">
            <summary>
            操作Xml及XHtml的基类
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.dicForAutoSetValue">
            <summary>
            用于批量赋值（LoadData(MDataRow,pre)方法装载)
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase._XmlDocument">
            <summary>
            xml对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.xnm">
            <summary>
            命名空间对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.theCache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.htmlNameSpace">
            <summary>
            Html名称空间
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.XmlCacheKey">
            <summary>
            xml缓存的key
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.GenerateKey(System.String)">
            <summary>
            从绝对路径中获得文件名做为Key值
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.docTypeHtml">
            <summary>
            docTypeHtml是一样的。
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadXml(System.String)">
            <summary>
            从xml字符串加载
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String)">
            <summary>
            从文件中加载Xml
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String,CYQ.Data.Xml.XmlCacheLevel)">
            <summary>
            加载XML
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String,CYQ.Data.Xml.XmlCacheLevel,System.Boolean)">
            <summary>
            加载Xml文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="level">文件缓存级别</param>
            <param name="clearCommentNode">加载后是否清除注释节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadFromCache(System.String)">
            <summary>
            从缓存中加载html
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.RemoveCommentNode">
            <summary>
            移除所有注释节点
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadFromFile(System.String,System.Boolean)">
            <summary>
            从文件加载XML （最终调用的方法）
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SaveToCache(System.String,System.Boolean)">
            <summary>
            将文档缓存到全局Cache中
            </summary>
            <param name="key">缓存的Key名称</param>
            <param name="isClone">是否克隆副本存档</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SaveToCache(System.String,System.Boolean,System.Double)">
            <summary>
            将文档缓存到全局Cache中
            </summary>
            <param name="key">缓存的Key名称</param>
            <param name="isClone">是否克隆副本存档</param>
            <param name="cacheTimeMinutes">存档的分钟数</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Save">
            <summary>
            文件保存
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Save(System.String)">
            <param name="fileName">指定保存路径</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SetCDATA(System.String)">
            <summary>
            给指定的字符加上CDATA
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.ClearCDATA(System.String)">
            <summary>
            清除CDATA
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.ClearMMS(System.String)">
            <summary>
            替换掉MMS前缀
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Filter(System.String)">
            <summary>
            过滤XML(十六进制值 0x1D)无效的字符（同时替换&gt;符号）
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.Encoding">
            <summary>
            文件编码
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.XmlDoc">
            <summary>
            内部XmlDocument对象
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.FileName">
            <summary>
            加载的Xml文件的完整（路径）名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsNoClone">
            <summary>
            存取档不克隆（此时XHtml应是只读模式)
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsLoadFromCache">
            <summary>
            文档是否取自缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsCacheChanged">
            <summary>
            Cache发生变化[用户更改缓存并设置更改标识]
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.IsXHtmlChanged">
            <summary>
            目标XHtml文件是否被修改
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.CacheMinutes">
            <summary>
            缓存分钟数
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.OutXml">
            <summary>
            返回最终格式化后的XHtml内容。
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor">
            <summary>
            默认构造函数[操作无名称空间的Xml]
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isForHtml">true时，将自动载入html的名称空间(http://www.w3.org/1999/xhtml)</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isForHtml">true时，将自动载入html的名称空间(http://www.w3.org/1999/xhtml)</param>
            <param name="isNoClone">true时文档应为只读，所获取是同一份文档引用；false时文档可写，每次获取会克隆一份文档返回。</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameSpaceUrl">当Xml的名称空间[若有]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Get(System.String)">
            <summary>
            GetByID or GetByName
            </summary>
            <param name="idOrName">id or name</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.AppendNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Int32)">
            <summary>
            添加节点
            </summary>
            <param name="position">parentNode的第N个子节点之后</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Clear(System.Xml.XmlNode)">
            <summary>
            保留节点,但清除节点所内容/属性
            </summary>
            <param name="OldNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveChild(System.String,System.Int32)">
            <summary>
            移除子节点
            </summary>
            <param name="id">节点的ID</param>
            <param name="start">从第几个子节点开始删除[索引从0开始]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveChild(System.Xml.XmlNode,System.Int32)">
            <summary>
            移除子节点
            </summary>
            <param name="node">节点</param>
            <param name="start">从第几个子节点开始删除[索引从0开始]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveAttrList(System.String[])">
            <summary>
            移除多个属性
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveAttrList(System.String,CYQ.Data.Xml.SetType)">
            <summary>
            属性移除
            </summary>
            <param name="attrName">属性名称</param>
            <param name="excludeSetType">排除的节点类型</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveCommentNode(System.Xml.XmlNode)">
            <summary>
            移除注释节点
            </summary>
            <param name="node">移除此节点的注释文本</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveCommentNode">
            <summary>
            移除注释节点
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InterChange(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            两个节点交换位置
            </summary>
            <param name="XNodeFirst">第一个节点</param>
            <param name="XNodeLast">第二个节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ReplaceNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点替换[支持两个的文档间替换]
            </summary>
            <param name="NewXNode"></param>
            <param name="OldXNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之后插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点后插入NewNode节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之前插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点前插入NewNode节点</param>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlAction.IsUseLangSplit">
            <summary>
            是否开始自定义语言分隔(分隔符号为：[#langsplit])
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Set(System.Xml.XmlNode,CYQ.Data.Xml.SetType,System.String[])">
            <summary>
            为节点赋值[通常值是在values中赋值]
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Set(System.String,System.String)">
            <summary>
            对节点赋值（此方法会忽略hidden隐藏域，隐藏节点赋值请用其它重载方法）
            </summary>
            <param name="idOrName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(CYQ.Data.Table.MDataTable)">
            <summary>
            装载数据行 （一般后续配合SetForeach方法使用）
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(CYQ.Data.Table.MDataRow,System.String)">
            <summary>
            装载数据行 （一般后续配合SetFor方法使用）
            </summary>
            <param name="autoSetValuePre">批量赋值的前缀（如："txt#",或空前缀：""）赋值后，将在获取OutXml属性时处理赋值</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.LoadData(CYQ.Data.Table.MDataRow)">
            <summary>
            装载行数据 （一般后续配合SetFor方法使用）
            </summary>
            <param name="row">数据行</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String)">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="id">节点的ID</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String,CYQ.Data.Xml.SetType)">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="setType">节点的类型</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String,CYQ.Data.Xml.SetType,System.String[])">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="values">setType为Custom时，可自定义值，如“"href","http://www.cyqdata.com","target","_blank"”</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ToJson(System.Xml.XmlNode,System.Boolean)">
            <summary>
            转Json
            <param name="parent">可设置一个节点（默认根节点）</param>
            <param name="isWithAttr">是否将属性值也输出</param>
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlAction.IsCurrentLang">
            <summary>
            当前请求是否用户当前设置的语言
            </summary>
        </member>
        <member name="E:CYQ.Data.Xml.XHtmlAction.OnForeach">
            <summary>
            对于SetForeach函数调用的格式化事件
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlUrlResolver.ResolveUri(System.Uri,System.String)">
            assemblyShortName;component/resourceLocation， 例如"/SilverlightLibraryAssembly;component/image.png"。 请注意，需要使用前导斜杠和 component 关键字（后跟一个斜杠）。
        </member>
        <member name="T:CYQ.Data.Xml.SetType">
            <summary>
            设置操作的节点属性类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.SetType.A">
            <summary>
            A链接标识，最多可赋4个值为:InnerXml,href,title,target
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.SetType.Custom">
            <summary>
            自定义，以“属性,值,属性,值”这样的对应设置，无个数限制。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.LanguageKey">
            <summary>
            语言种类
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.None">
            <summary>
            未设置状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.English">
            <summary>
            英文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.French">
            <summary>
            法语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.German">
            <summary>
            德语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Korean">
            <summary>
            韩语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Japanese">
            <summary>
            日语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Hindi">
            <summary>
            印地语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Russian">
            <summary>
             俄语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Italian">
            <summary>
            意大利语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Custom">
            <summary>
            自定义语言
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XmlCacheLevel">
            <summary>
            Xml|XHtml 加载后缓存级别
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.NoCache">
            <summary>
            无缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Lower">
            <summary>
            低缓存,5分钟
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Default">
            <summary>
            默认取自配置项CacheTime时间,
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Minute">
            <summary>
            1分钟
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Hour">
            <summary>
            1小时
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Day">
            <summary>
            1天时间
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Week">
            <summary>
            一周时间
            </summary>
        </member>
    </members>
</doc>
